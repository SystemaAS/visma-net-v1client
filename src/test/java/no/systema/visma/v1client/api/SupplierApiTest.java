/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.api;

import no.systema.visma.v1client.model.ContactDto;
import no.systema.visma.v1client.model.SupplierBalanceDto;
import no.systema.visma.v1client.model.SupplierClassDto;
import no.systema.visma.v1client.model.SupplierDocumentDto;
import no.systema.visma.v1client.model.SupplierDto;
import no.systema.visma.v1client.model.SupplierInvoiceDto;
import no.systema.visma.v1client.model.SupplierPOBalanceDto;
import no.systema.visma.v1client.model.SupplierUpdateDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SupplierApi
 */
@Ignore
public class SupplierApiTest {

    private final SupplierApi api = new SupplierApi();

    
    /**
     * Get a range of suppliers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void supplierGetAllTest() {
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        String name = null;
        String status = null;
        String vatRegistrationId = null;
        String corporateId = null;
        String attributes = null;
        List<SupplierDto> response = api.supplierGetAll(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, name, status, vatRegistrationId, corporateId, attributes);

        // TODO: test validations
    }
    
    /**
     * Get a range of a Supplier of a specific supplier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void supplierGetAllContactForSupplierBysupplierCdTest() {
        String supplierCd = null;
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        List<ContactDto> response = api.supplierGetAllContactForSupplierBysupplierCd(supplierCd, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition);

        // TODO: test validations
    }
    
    /**
     * Gets a range of documents for a specific supplier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void supplierGetAllDocumentsForSupplierBysupplierNumberTest() {
        String supplierNumber = null;
        String documentType = null;
        Integer released = null;
        String project = null;
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        List<SupplierDocumentDto> response = api.supplierGetAllDocumentsForSupplierBysupplierNumber(supplierNumber, documentType, released, project, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, pageNumber, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get a range of invoices for a specific supplier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void supplierGetAllInvoicesForSupplierBysupplierNumberTest() {
        String supplierNumber = null;
        String documentType = null;
        Integer released = null;
        String project = null;
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        List<SupplierInvoiceDto> response = api.supplierGetAllInvoicesForSupplierBysupplierNumber(supplierNumber, documentType, released, project, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, pageNumber, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get the balance of a range of suppliers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void supplierGetAllSupplierBalanceTest() {
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        List<SupplierBalanceDto> response = api.supplierGetAllSupplierBalance(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition);

        // TODO: test validations
    }
    
    /**
     * Get supplier classes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void supplierGetAllSupplierClassesTest() {
        List<SupplierClassDto> response = api.supplierGetAllSupplierClasses();

        // TODO: test validations
    }
    
    /**
     * Get the PO balance of a range of suppliers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void supplierGetAllSupplierPOBalanceTest() {
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        List<SupplierPOBalanceDto> response = api.supplierGetAllSupplierPOBalance(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition);

        // TODO: test validations
    }
    
    /**
     * Get a specific supplier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void supplierGetBysupplierCdTest() {
        String supplierCd = null;
        SupplierDto response = api.supplierGetBysupplierCd(supplierCd);

        // TODO: test validations
    }
    
    /**
     * Get a specific supplier class
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void supplierGetSpecificSupplierClassBysupplierClassIdTest() {
        String supplierClassId = null;
        SupplierClassDto response = api.supplierGetSpecificSupplierClassBysupplierClassId(supplierClassId);

        // TODO: test validations
    }
    
    /**
     * Get a specific supplier&#39;s PO balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void supplierGetSupplierBalanceBysupplierCdTest() {
        String supplierCd = null;
        SupplierBalanceDto response = api.supplierGetSupplierBalanceBysupplierCd(supplierCd);

        // TODO: test validations
    }
    
    /**
     * Get a specific supplier&#39;s PO balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void supplierGetSupplierPOBalanceBysupplierCdTest() {
        String supplierCd = null;
        SupplierPOBalanceDto response = api.supplierGetSupplierPOBalanceBysupplierCd(supplierCd);

        // TODO: test validations
    }
    
    /**
     * Create a supplier
     *
     * Response Message has StatusCode Created if POST operation succeed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void supplierPostTest() {
        SupplierUpdateDto supplier = null;
        Object response = api.supplierPost(supplier);

        // TODO: test validations
    }
    
    /**
     * Update a specific supplier
     *
     * Response Message has StatusCode NoContent if PUT operation succeed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void supplierPutBysupplierCdTest() {
        String supplierCd = null;
        SupplierUpdateDto supplier = null;
        Object response = api.supplierPutBysupplierCd(supplierCd, supplier);

        // TODO: test validations
    }
    
}
