/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.api;

import no.systema.visma.v1client.model.EmployeeDto;
import no.systema.visma.v1client.model.ExpenseClaimDto;
import no.systema.visma.v1client.model.ExpenseReceiptDto;
import java.time.LocalDateTime;
import no.systema.visma.v1client.model.TimeCardDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeeApi
 */
@Ignore
public class EmployeeApiTest {

    private final EmployeeApi api = new EmployeeApi();

    
    /**
     * Get a range of employees
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void employeeGetAllEmplyeeTest() {
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        List<EmployeeDto> response = api.employeeGetAllEmplyee(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, pageNumber, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get a specific employee
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void employeeGetEmployeeByemployeeCdTest() {
        String employeeCd = null;
        EmployeeDto response = api.employeeGetEmployeeByemployeeCd(employeeCd);

        // TODO: test validations
    }
    
    /**
     * Get expense claims for a specific employee
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void employeeGetEmployeeExpenseClaimsByemployeeCdTest() {
        String employeeCd = null;
        String status = null;
        LocalDateTime date = null;
        String customer = null;
        String departmentId = null;
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        List<ExpenseClaimDto> response = api.employeeGetEmployeeExpenseClaimsByemployeeCd(employeeCd, status, date, customer, departmentId, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition);

        // TODO: test validations
    }
    
    /**
     * Get expense receipts for a specific employee
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void employeeGetEmployeeExpenseReceiptsByemployeeCdTest() {
        String employeeCd = null;
        String date = null;
        String dateCondition = null;
        String inventory = null;
        String project = null;
        String claimedBy = null;
        String projectTask = null;
        Boolean invoiceable = null;
        String status = null;
        String customer = null;
        List<ExpenseReceiptDto> response = api.employeeGetEmployeeExpenseReceiptsByemployeeCd(employeeCd, date, dateCondition, inventory, project, claimedBy, projectTask, invoiceable, status, customer);

        // TODO: test validations
    }
    
    /**
     * Get a specific employee time cards
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void employeeGetEmployeeTimeCardsByemployeeCdTest() {
        String employeeCd = null;
        String status = null;
        String week = null;
        String type = null;
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        List<TimeCardDto> response = api.employeeGetEmployeeTimeCardsByemployeeCd(employeeCd, status, week, type, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition);

        // TODO: test validations
    }
    
}
