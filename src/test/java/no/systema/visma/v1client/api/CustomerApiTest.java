/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.api;

import no.systema.visma.v1client.model.CashSaleDto;
import no.systema.visma.v1client.model.ContactDto;
import no.systema.visma.v1client.model.CreateDunningLetterActionDto;
import no.systema.visma.v1client.model.CreateDunningLetterActionResultDto;
import no.systema.visma.v1client.model.CustomerBalanceDto;
import no.systema.visma.v1client.model.CustomerClassDto;
import no.systema.visma.v1client.model.CustomerDirectDebitDto;
import no.systema.visma.v1client.model.CustomerDocumentDto;
import no.systema.visma.v1client.model.CustomerDto;
import no.systema.visma.v1client.model.CustomerInvoiceDto;
import no.systema.visma.v1client.model.CustomerUpdateDto;
import no.systema.visma.v1client.model.NoteDto;
import no.systema.visma.v1client.model.SalesOrderBasicDto;
import no.systema.visma.v1client.model.SalesOrderDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomerApi
 */
@Ignore
public class CustomerApiTest {

    private final CustomerApi api = new CustomerApi();

    
    /**
     * Creates dunning letters for a specific customer
     *
     * The action result dto contains information about the result of running the action
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerCreateDunningLetterActionBycustomerTest() {
        String customer = null;
        CreateDunningLetterActionDto createDunningLetterActionDto = null;
        CreateDunningLetterActionResultDto response = api.customerCreateDunningLetterActionBycustomer(customer, createDunningLetterActionDto);

        // TODO: test validations
    }
    
    /**
     * Get a range of customers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetAllTest() {
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String name = null;
        String status = null;
        String corporateId = null;
        String vatRegistrationId = null;
        String email = null;
        String phone = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        String createdDateTime = null;
        String createdDateTimeCondition = null;
        String attributes = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        List<CustomerDto> response = api.customerGetAll(greaterThanValue, numberToRead, skipRecords, name, status, corporateId, vatRegistrationId, email, phone, lastModifiedDateTime, lastModifiedDateTimeCondition, createdDateTime, createdDateTimeCondition, attributes, pageNumber, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get a range of cash sales for a specific customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetAllCashSalesForCustomerBycustomerNumberTest() {
        String customerNumber = null;
        String documentType = null;
        Integer released = null;
        Integer dunningLevel = null;
        String closedFinancialPeriod = null;
        String dunningLetterDateTime = null;
        String dunningLetterDateTimeCondition = null;
        String project = null;
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        List<CashSaleDto> response = api.customerGetAllCashSalesForCustomerBycustomerNumber(customerNumber, documentType, released, dunningLevel, closedFinancialPeriod, dunningLetterDateTime, dunningLetterDateTimeCondition, project, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, pageNumber, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get a range of Contacts of a specific customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetAllContactsForCustomerBycustomerCdTest() {
        String customerCd = null;
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        List<ContactDto> response = api.customerGetAllContactsForCustomerBycustomerCd(customerCd, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition);

        // TODO: test validations
    }
    
    /**
     * Get the balance for a range of customers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetAllCustomerBalanceTest() {
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        List<CustomerBalanceDto> response = api.customerGetAllCustomerBalance(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition);

        // TODO: test validations
    }
    
    /**
     * Gets a range of documents for a specific customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetAllDocumentsForCustomerBycustomerNumberTest() {
        String customerNumber = null;
        String documentType = null;
        Integer released = null;
        Integer dunningLevel = null;
        String closedFinancialPeriod = null;
        String dunningLetterDateTime = null;
        String dunningLetterDateTimeCondition = null;
        String project = null;
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        List<CustomerDocumentDto> response = api.customerGetAllDocumentsForCustomerBycustomerNumber(customerNumber, documentType, released, dunningLevel, closedFinancialPeriod, dunningLetterDateTime, dunningLetterDateTimeCondition, project, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, pageNumber, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get a range of invoices for a specific customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetAllInvoicesForCustomerBycustomerNumberTest() {
        String customerNumber = null;
        String documentType = null;
        Integer released = null;
        Integer dunningLevel = null;
        String closedFinancialPeriod = null;
        String dunningLetterDateTime = null;
        String dunningLetterDateTimeCondition = null;
        String project = null;
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        List<CustomerInvoiceDto> response = api.customerGetAllInvoicesForCustomerBycustomerNumber(customerNumber, documentType, released, dunningLevel, closedFinancialPeriod, dunningLetterDateTime, dunningLetterDateTimeCondition, project, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, pageNumber, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get a range of SO Orders of a specific customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetAllOrderForCustomerBycustomerCdTest() {
        String customerCd = null;
        String orderType = null;
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        Boolean showNotes = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        List<SalesOrderDto> response = api.customerGetAllOrderForCustomerBycustomerCd(customerCd, orderType, greaterThanValue, numberToRead, skipRecords, orderBy, showNotes, lastModifiedDateTime, lastModifiedDateTimeCondition, pageNumber, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get a range of SO Orders Basic of a specific customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetAllSalesOrderBasicForCustomerBycustomerCdTest() {
        String customerCd = null;
        String orderType = null;
        String greaterThanValue = null;
        Integer numberToRead = null;
        Integer skipRecords = null;
        String orderBy = null;
        Boolean showNotes = null;
        String lastModifiedDateTime = null;
        String lastModifiedDateTimeCondition = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        List<SalesOrderBasicDto> response = api.customerGetAllSalesOrderBasicForCustomerBycustomerCd(customerCd, orderType, greaterThanValue, numberToRead, skipRecords, orderBy, showNotes, lastModifiedDateTime, lastModifiedDateTimeCondition, pageNumber, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get a specific customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetBycustomerCdTest() {
        String customerCd = null;
        CustomerDto response = api.customerGetBycustomerCd(customerCd);

        // TODO: test validations
    }
    
    /**
     * Get a specific customer&#39;s balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetCustomerBalanceBycustomerCdTest() {
        String customerCd = null;
        CustomerBalanceDto response = api.customerGetCustomerBalanceBycustomerCd(customerCd);

        // TODO: test validations
    }
    
    /**
     * Get Customer Classes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetCustomerClassesTest() {
        List<CustomerClassDto> response = api.customerGetCustomerClasses();

        // TODO: test validations
    }
    
    /**
     * Get direct debit information for a specific customer(only for Netherlands)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetCustomerDirectDebitBycustomerCdTest() {
        String customerCd = null;
        List<CustomerDirectDebitDto> response = api.customerGetCustomerDirectDebitBycustomerCd(customerCd);

        // TODO: test validations
    }
    
    /**
     * Get a specific customer&#39;s note
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetCustomerNoteBycustomerCdTest() {
        String customerCd = null;
        NoteDto response = api.customerGetCustomerNoteBycustomerCd(customerCd);

        // TODO: test validations
    }
    
    /**
     * Get a specific customer class
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetSpecificCustomerClassBycustomerClassIdTest() {
        String customerClassId = null;
        CustomerClassDto response = api.customerGetSpecificCustomerClassBycustomerClassId(customerClassId);

        // TODO: test validations
    }
    
    /**
     * Creates a customer
     *
     * Response Message has StatusCode Created if POST operation succeed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerPostTest() {
        CustomerUpdateDto customer = null;
        Object response = api.customerPost(customer);

        // TODO: test validations
    }
    
    /**
     * Updates a specific customer
     *
     * Response Message has StatusCode NoContent if PUT operation succeed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerPutBycustomerCdTest() {
        String customerCd = null;
        CustomerUpdateDto customer = null;
        Object response = api.customerPutBycustomerCd(customerCd, customer);

        // TODO: test validations
    }
    
}
