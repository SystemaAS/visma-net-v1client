/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import no.systema.visma.v1client.model.CustomerNumberDto;
import no.systema.visma.v1client.model.LocationDescriptionDto;
import no.systema.visma.v1client.model.OrderToApplyDto;
import no.systema.visma.v1client.model.PaymentLineDto;
import no.systema.visma.v1client.model.PaymentMethodIdDescriptionDto;

/**
 * This class represents a Payment in PaymentController. Used by getting data.
 */
@ApiModel(description = "This class represents a Payment in PaymentController. Used by getting data.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T15:04:09.234+02:00")
public class PaymentDto {
  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    PAYMENT("Payment"),
    
    CREDITNOTE("CreditNote"),
    
    PREPAYMENT("Prepayment"),
    
    REFUND("Refund"),
    
    VOIDPAYMENT("VoidPayment"),
    
    SMALLBALANCEWO("SmallBalanceWo");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("refNbr")
  private String refNbr = null;

  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    HOLD("Hold"),
    
    BALANCED("Balanced"),
    
    VOIDED("Voided"),
    
    SCHEDULED("Scheduled"),
    
    OPEN("Open"),
    
    CLOSED("Closed"),
    
    PENDINGPRINT("PendingPrint"),
    
    PENDINGEMAIL("PendingEmail"),
    
    CREDITHOLD("CreditHold"),
    
    CCHOLD("CcHold"),
    
    RESERVED("Reserved");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("hold")
  private Boolean hold = null;

  @JsonProperty("applicationDate")
  private LocalDateTime applicationDate = null;

  @JsonProperty("applicationPeriod")
  private String applicationPeriod = null;

  @JsonProperty("paymentRef")
  private String paymentRef = null;

  @JsonProperty("customer")
  private CustomerNumberDto customer = null;

  @JsonProperty("location")
  private LocationDescriptionDto location = null;

  @JsonProperty("paymentMethod")
  private PaymentMethodIdDescriptionDto paymentMethod = null;

  @JsonProperty("cashAccount")
  private String cashAccount = null;

  @JsonProperty("currency")
  private String currency = null;

  @JsonProperty("paymentAmount")
  private Double paymentAmount = null;

  @JsonProperty("invoiceText")
  private String invoiceText = null;

  @JsonProperty("appliedToDocuments")
  private Double appliedToDocuments = null;

  @JsonProperty("appliedToOrders")
  private Double appliedToOrders = null;

  @JsonProperty("availableBalance")
  private Double availableBalance = null;

  @JsonProperty("writeOffAmount")
  private Double writeOffAmount = null;

  @JsonProperty("financeCharges")
  private Double financeCharges = null;

  @JsonProperty("deductedCharges")
  private Double deductedCharges = null;

  @JsonProperty("branch")
  private String branch = null;

  @JsonProperty("lastModifiedDateTime")
  private LocalDateTime lastModifiedDateTime = null;

  @JsonProperty("paymentLines")
  private List<PaymentLineDto> paymentLines = null;

  @JsonProperty("ordersToApply")
  private List<OrderToApplyDto> ordersToApply = null;

  public PaymentDto type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public PaymentDto refNbr(String refNbr) {
    this.refNbr = refNbr;
    return this;
  }

   /**
   * Get refNbr
   * @return refNbr
  **/
  @ApiModelProperty(value = "")
  public String getRefNbr() {
    return refNbr;
  }

  public void setRefNbr(String refNbr) {
    this.refNbr = refNbr;
  }

  public PaymentDto status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public PaymentDto hold(Boolean hold) {
    this.hold = hold;
    return this;
  }

   /**
   * Get hold
   * @return hold
  **/
  @ApiModelProperty(value = "")
  public Boolean isHold() {
    return hold;
  }

  public void setHold(Boolean hold) {
    this.hold = hold;
  }

  public PaymentDto applicationDate(LocalDateTime applicationDate) {
    this.applicationDate = applicationDate;
    return this;
  }

   /**
   * Get applicationDate
   * @return applicationDate
  **/
  @ApiModelProperty(value = "")
  public LocalDateTime getApplicationDate() {
    return applicationDate;
  }

  public void setApplicationDate(LocalDateTime applicationDate) {
    this.applicationDate = applicationDate;
  }

  public PaymentDto applicationPeriod(String applicationPeriod) {
    this.applicationPeriod = applicationPeriod;
    return this;
  }

   /**
   * Get applicationPeriod
   * @return applicationPeriod
  **/
  @ApiModelProperty(value = "")
  public String getApplicationPeriod() {
    return applicationPeriod;
  }

  public void setApplicationPeriod(String applicationPeriod) {
    this.applicationPeriod = applicationPeriod;
  }

  public PaymentDto paymentRef(String paymentRef) {
    this.paymentRef = paymentRef;
    return this;
  }

   /**
   * Get paymentRef
   * @return paymentRef
  **/
  @ApiModelProperty(value = "")
  public String getPaymentRef() {
    return paymentRef;
  }

  public void setPaymentRef(String paymentRef) {
    this.paymentRef = paymentRef;
  }

  public PaymentDto customer(CustomerNumberDto customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @ApiModelProperty(value = "")
  public CustomerNumberDto getCustomer() {
    return customer;
  }

  public void setCustomer(CustomerNumberDto customer) {
    this.customer = customer;
  }

  public PaymentDto location(LocationDescriptionDto location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @ApiModelProperty(value = "")
  public LocationDescriptionDto getLocation() {
    return location;
  }

  public void setLocation(LocationDescriptionDto location) {
    this.location = location;
  }

  public PaymentDto paymentMethod(PaymentMethodIdDescriptionDto paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @ApiModelProperty(value = "")
  public PaymentMethodIdDescriptionDto getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(PaymentMethodIdDescriptionDto paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  public PaymentDto cashAccount(String cashAccount) {
    this.cashAccount = cashAccount;
    return this;
  }

   /**
   * Get cashAccount
   * @return cashAccount
  **/
  @ApiModelProperty(value = "")
  public String getCashAccount() {
    return cashAccount;
  }

  public void setCashAccount(String cashAccount) {
    this.cashAccount = cashAccount;
  }

  public PaymentDto currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @ApiModelProperty(value = "")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public PaymentDto paymentAmount(Double paymentAmount) {
    this.paymentAmount = paymentAmount;
    return this;
  }

   /**
   * Get paymentAmount
   * @return paymentAmount
  **/
  @ApiModelProperty(value = "")
  public Double getPaymentAmount() {
    return paymentAmount;
  }

  public void setPaymentAmount(Double paymentAmount) {
    this.paymentAmount = paymentAmount;
  }

  public PaymentDto invoiceText(String invoiceText) {
    this.invoiceText = invoiceText;
    return this;
  }

   /**
   * Get invoiceText
   * @return invoiceText
  **/
  @ApiModelProperty(value = "")
  public String getInvoiceText() {
    return invoiceText;
  }

  public void setInvoiceText(String invoiceText) {
    this.invoiceText = invoiceText;
  }

  public PaymentDto appliedToDocuments(Double appliedToDocuments) {
    this.appliedToDocuments = appliedToDocuments;
    return this;
  }

   /**
   * Get appliedToDocuments
   * @return appliedToDocuments
  **/
  @ApiModelProperty(value = "")
  public Double getAppliedToDocuments() {
    return appliedToDocuments;
  }

  public void setAppliedToDocuments(Double appliedToDocuments) {
    this.appliedToDocuments = appliedToDocuments;
  }

  public PaymentDto appliedToOrders(Double appliedToOrders) {
    this.appliedToOrders = appliedToOrders;
    return this;
  }

   /**
   * Get appliedToOrders
   * @return appliedToOrders
  **/
  @ApiModelProperty(value = "")
  public Double getAppliedToOrders() {
    return appliedToOrders;
  }

  public void setAppliedToOrders(Double appliedToOrders) {
    this.appliedToOrders = appliedToOrders;
  }

  public PaymentDto availableBalance(Double availableBalance) {
    this.availableBalance = availableBalance;
    return this;
  }

   /**
   * Get availableBalance
   * @return availableBalance
  **/
  @ApiModelProperty(value = "")
  public Double getAvailableBalance() {
    return availableBalance;
  }

  public void setAvailableBalance(Double availableBalance) {
    this.availableBalance = availableBalance;
  }

  public PaymentDto writeOffAmount(Double writeOffAmount) {
    this.writeOffAmount = writeOffAmount;
    return this;
  }

   /**
   * Get writeOffAmount
   * @return writeOffAmount
  **/
  @ApiModelProperty(value = "")
  public Double getWriteOffAmount() {
    return writeOffAmount;
  }

  public void setWriteOffAmount(Double writeOffAmount) {
    this.writeOffAmount = writeOffAmount;
  }

  public PaymentDto financeCharges(Double financeCharges) {
    this.financeCharges = financeCharges;
    return this;
  }

   /**
   * Get financeCharges
   * @return financeCharges
  **/
  @ApiModelProperty(value = "")
  public Double getFinanceCharges() {
    return financeCharges;
  }

  public void setFinanceCharges(Double financeCharges) {
    this.financeCharges = financeCharges;
  }

  public PaymentDto deductedCharges(Double deductedCharges) {
    this.deductedCharges = deductedCharges;
    return this;
  }

   /**
   * Get deductedCharges
   * @return deductedCharges
  **/
  @ApiModelProperty(value = "")
  public Double getDeductedCharges() {
    return deductedCharges;
  }

  public void setDeductedCharges(Double deductedCharges) {
    this.deductedCharges = deductedCharges;
  }

  public PaymentDto branch(String branch) {
    this.branch = branch;
    return this;
  }

   /**
   * Get branch
   * @return branch
  **/
  @ApiModelProperty(value = "")
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }

  public PaymentDto lastModifiedDateTime(LocalDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
    return this;
  }

   /**
   * Get lastModifiedDateTime
   * @return lastModifiedDateTime
  **/
  @ApiModelProperty(value = "")
  public LocalDateTime getLastModifiedDateTime() {
    return lastModifiedDateTime;
  }

  public void setLastModifiedDateTime(LocalDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
  }

  public PaymentDto paymentLines(List<PaymentLineDto> paymentLines) {
    this.paymentLines = paymentLines;
    return this;
  }

  public PaymentDto addPaymentLinesItem(PaymentLineDto paymentLinesItem) {
    if (this.paymentLines == null) {
      this.paymentLines = new ArrayList<>();
    }
    this.paymentLines.add(paymentLinesItem);
    return this;
  }

   /**
   * Get paymentLines
   * @return paymentLines
  **/
  @ApiModelProperty(value = "")
  public List<PaymentLineDto> getPaymentLines() {
    return paymentLines;
  }

  public void setPaymentLines(List<PaymentLineDto> paymentLines) {
    this.paymentLines = paymentLines;
  }

  public PaymentDto ordersToApply(List<OrderToApplyDto> ordersToApply) {
    this.ordersToApply = ordersToApply;
    return this;
  }

  public PaymentDto addOrdersToApplyItem(OrderToApplyDto ordersToApplyItem) {
    if (this.ordersToApply == null) {
      this.ordersToApply = new ArrayList<>();
    }
    this.ordersToApply.add(ordersToApplyItem);
    return this;
  }

   /**
   * Get ordersToApply
   * @return ordersToApply
  **/
  @ApiModelProperty(value = "")
  public List<OrderToApplyDto> getOrdersToApply() {
    return ordersToApply;
  }

  public void setOrdersToApply(List<OrderToApplyDto> ordersToApply) {
    this.ordersToApply = ordersToApply;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentDto paymentDto = (PaymentDto) o;
    return Objects.equals(this.type, paymentDto.type) &&
        Objects.equals(this.refNbr, paymentDto.refNbr) &&
        Objects.equals(this.status, paymentDto.status) &&
        Objects.equals(this.hold, paymentDto.hold) &&
        Objects.equals(this.applicationDate, paymentDto.applicationDate) &&
        Objects.equals(this.applicationPeriod, paymentDto.applicationPeriod) &&
        Objects.equals(this.paymentRef, paymentDto.paymentRef) &&
        Objects.equals(this.customer, paymentDto.customer) &&
        Objects.equals(this.location, paymentDto.location) &&
        Objects.equals(this.paymentMethod, paymentDto.paymentMethod) &&
        Objects.equals(this.cashAccount, paymentDto.cashAccount) &&
        Objects.equals(this.currency, paymentDto.currency) &&
        Objects.equals(this.paymentAmount, paymentDto.paymentAmount) &&
        Objects.equals(this.invoiceText, paymentDto.invoiceText) &&
        Objects.equals(this.appliedToDocuments, paymentDto.appliedToDocuments) &&
        Objects.equals(this.appliedToOrders, paymentDto.appliedToOrders) &&
        Objects.equals(this.availableBalance, paymentDto.availableBalance) &&
        Objects.equals(this.writeOffAmount, paymentDto.writeOffAmount) &&
        Objects.equals(this.financeCharges, paymentDto.financeCharges) &&
        Objects.equals(this.deductedCharges, paymentDto.deductedCharges) &&
        Objects.equals(this.branch, paymentDto.branch) &&
        Objects.equals(this.lastModifiedDateTime, paymentDto.lastModifiedDateTime) &&
        Objects.equals(this.paymentLines, paymentDto.paymentLines) &&
        Objects.equals(this.ordersToApply, paymentDto.ordersToApply);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, refNbr, status, hold, applicationDate, applicationPeriod, paymentRef, customer, location, paymentMethod, cashAccount, currency, paymentAmount, invoiceText, appliedToDocuments, appliedToOrders, availableBalance, writeOffAmount, financeCharges, deductedCharges, branch, lastModifiedDateTime, paymentLines, ordersToApply);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentDto {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    refNbr: ").append(toIndentedString(refNbr)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    hold: ").append(toIndentedString(hold)).append("\n");
    sb.append("    applicationDate: ").append(toIndentedString(applicationDate)).append("\n");
    sb.append("    applicationPeriod: ").append(toIndentedString(applicationPeriod)).append("\n");
    sb.append("    paymentRef: ").append(toIndentedString(paymentRef)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    cashAccount: ").append(toIndentedString(cashAccount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    paymentAmount: ").append(toIndentedString(paymentAmount)).append("\n");
    sb.append("    invoiceText: ").append(toIndentedString(invoiceText)).append("\n");
    sb.append("    appliedToDocuments: ").append(toIndentedString(appliedToDocuments)).append("\n");
    sb.append("    appliedToOrders: ").append(toIndentedString(appliedToOrders)).append("\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    writeOffAmount: ").append(toIndentedString(writeOffAmount)).append("\n");
    sb.append("    financeCharges: ").append(toIndentedString(financeCharges)).append("\n");
    sb.append("    deductedCharges: ").append(toIndentedString(deductedCharges)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    lastModifiedDateTime: ").append(toIndentedString(lastModifiedDateTime)).append("\n");
    sb.append("    paymentLines: ").append(toIndentedString(paymentLines)).append("\n");
    sb.append("    ordersToApply: ").append(toIndentedString(ordersToApply)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

