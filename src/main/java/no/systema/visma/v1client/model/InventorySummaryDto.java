/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import no.systema.visma.v1client.model.InventoryNumberDescriptionDto;
import no.systema.visma.v1client.model.LocationIdNameDto;
import no.systema.visma.v1client.model.WarehouseIdDescriptionDto;

/**
 * This class represents a InventorySummary in InventorySummaryController. Used by getting data.
 */
@ApiModel(description = "This class represents a InventorySummary in InventorySummaryController. Used by getting data.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T15:04:09.234+02:00")
public class InventorySummaryDto {
  @JsonProperty("inventory")
  private InventoryNumberDescriptionDto inventory = null;

  @JsonProperty("warehouse")
  private WarehouseIdDescriptionDto warehouse = null;

  @JsonProperty("location")
  private LocationIdNameDto location = null;

  @JsonProperty("available")
  private Double available = null;

  @JsonProperty("availableForShipment")
  private Double availableForShipment = null;

  @JsonProperty("notAvailable")
  private Double notAvailable = null;

  @JsonProperty("soBooked")
  private Double soBooked = null;

  @JsonProperty("soAllocated")
  private Double soAllocated = null;

  @JsonProperty("soShipped")
  private Double soShipped = null;

  @JsonProperty("soBackOrdered")
  private Double soBackOrdered = null;

  @JsonProperty("inIssues")
  private Double inIssues = null;

  @JsonProperty("inReceipts")
  private Double inReceipts = null;

  @JsonProperty("inTransit")
  private Double inTransit = null;

  @JsonProperty("inAssemblyDemand")
  private Double inAssemblyDemand = null;

  @JsonProperty("inAssemblySupply")
  private Double inAssemblySupply = null;

  @JsonProperty("purchasePrepared")
  private Double purchasePrepared = null;

  @JsonProperty("purchaseOrders")
  private Double purchaseOrders = null;

  @JsonProperty("poReceipts")
  private Double poReceipts = null;

  @JsonProperty("expired")
  private Double expired = null;

  @JsonProperty("onHand")
  private Double onHand = null;

  @JsonProperty("soToPurchase")
  private Double soToPurchase = null;

  @JsonProperty("purchaseForSO")
  private Double purchaseForSO = null;

  @JsonProperty("purchaseForSOPrepared")
  private Double purchaseForSOPrepared = null;

  @JsonProperty("purchaseForSOReceipts")
  private Double purchaseForSOReceipts = null;

  @JsonProperty("soToDropShip")
  private Double soToDropShip = null;

  @JsonProperty("dropShipForSO")
  private Double dropShipForSO = null;

  @JsonProperty("dropShipForSOPrepared")
  private Double dropShipForSOPrepared = null;

  @JsonProperty("dropShipForSOReceipts")
  private Double dropShipForSOReceipts = null;

  @JsonProperty("baseUnit")
  private String baseUnit = null;

  @JsonProperty("estimatedUnitCost")
  private Double estimatedUnitCost = null;

  @JsonProperty("estimatedTotalCost")
  private Double estimatedTotalCost = null;

  @JsonProperty("extras")
  private Map<String, Object> extras = null;

  @JsonProperty("errorInfo")
  private String errorInfo = null;

  public InventorySummaryDto inventory(InventoryNumberDescriptionDto inventory) {
    this.inventory = inventory;
    return this;
  }

   /**
   * Get inventory
   * @return inventory
  **/
  @ApiModelProperty(value = "")
  public InventoryNumberDescriptionDto getInventory() {
    return inventory;
  }

  public void setInventory(InventoryNumberDescriptionDto inventory) {
    this.inventory = inventory;
  }

  public InventorySummaryDto warehouse(WarehouseIdDescriptionDto warehouse) {
    this.warehouse = warehouse;
    return this;
  }

   /**
   * Get warehouse
   * @return warehouse
  **/
  @ApiModelProperty(value = "")
  public WarehouseIdDescriptionDto getWarehouse() {
    return warehouse;
  }

  public void setWarehouse(WarehouseIdDescriptionDto warehouse) {
    this.warehouse = warehouse;
  }

  public InventorySummaryDto location(LocationIdNameDto location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @ApiModelProperty(value = "")
  public LocationIdNameDto getLocation() {
    return location;
  }

  public void setLocation(LocationIdNameDto location) {
    this.location = location;
  }

  public InventorySummaryDto available(Double available) {
    this.available = available;
    return this;
  }

   /**
   * Get available
   * @return available
  **/
  @ApiModelProperty(value = "")
  public Double getAvailable() {
    return available;
  }

  public void setAvailable(Double available) {
    this.available = available;
  }

  public InventorySummaryDto availableForShipment(Double availableForShipment) {
    this.availableForShipment = availableForShipment;
    return this;
  }

   /**
   * Get availableForShipment
   * @return availableForShipment
  **/
  @ApiModelProperty(value = "")
  public Double getAvailableForShipment() {
    return availableForShipment;
  }

  public void setAvailableForShipment(Double availableForShipment) {
    this.availableForShipment = availableForShipment;
  }

  public InventorySummaryDto notAvailable(Double notAvailable) {
    this.notAvailable = notAvailable;
    return this;
  }

   /**
   * Get notAvailable
   * @return notAvailable
  **/
  @ApiModelProperty(value = "")
  public Double getNotAvailable() {
    return notAvailable;
  }

  public void setNotAvailable(Double notAvailable) {
    this.notAvailable = notAvailable;
  }

  public InventorySummaryDto soBooked(Double soBooked) {
    this.soBooked = soBooked;
    return this;
  }

   /**
   * Get soBooked
   * @return soBooked
  **/
  @ApiModelProperty(value = "")
  public Double getSoBooked() {
    return soBooked;
  }

  public void setSoBooked(Double soBooked) {
    this.soBooked = soBooked;
  }

  public InventorySummaryDto soAllocated(Double soAllocated) {
    this.soAllocated = soAllocated;
    return this;
  }

   /**
   * Get soAllocated
   * @return soAllocated
  **/
  @ApiModelProperty(value = "")
  public Double getSoAllocated() {
    return soAllocated;
  }

  public void setSoAllocated(Double soAllocated) {
    this.soAllocated = soAllocated;
  }

  public InventorySummaryDto soShipped(Double soShipped) {
    this.soShipped = soShipped;
    return this;
  }

   /**
   * Get soShipped
   * @return soShipped
  **/
  @ApiModelProperty(value = "")
  public Double getSoShipped() {
    return soShipped;
  }

  public void setSoShipped(Double soShipped) {
    this.soShipped = soShipped;
  }

  public InventorySummaryDto soBackOrdered(Double soBackOrdered) {
    this.soBackOrdered = soBackOrdered;
    return this;
  }

   /**
   * Get soBackOrdered
   * @return soBackOrdered
  **/
  @ApiModelProperty(value = "")
  public Double getSoBackOrdered() {
    return soBackOrdered;
  }

  public void setSoBackOrdered(Double soBackOrdered) {
    this.soBackOrdered = soBackOrdered;
  }

  public InventorySummaryDto inIssues(Double inIssues) {
    this.inIssues = inIssues;
    return this;
  }

   /**
   * Get inIssues
   * @return inIssues
  **/
  @ApiModelProperty(value = "")
  public Double getInIssues() {
    return inIssues;
  }

  public void setInIssues(Double inIssues) {
    this.inIssues = inIssues;
  }

  public InventorySummaryDto inReceipts(Double inReceipts) {
    this.inReceipts = inReceipts;
    return this;
  }

   /**
   * Get inReceipts
   * @return inReceipts
  **/
  @ApiModelProperty(value = "")
  public Double getInReceipts() {
    return inReceipts;
  }

  public void setInReceipts(Double inReceipts) {
    this.inReceipts = inReceipts;
  }

  public InventorySummaryDto inTransit(Double inTransit) {
    this.inTransit = inTransit;
    return this;
  }

   /**
   * Get inTransit
   * @return inTransit
  **/
  @ApiModelProperty(value = "")
  public Double getInTransit() {
    return inTransit;
  }

  public void setInTransit(Double inTransit) {
    this.inTransit = inTransit;
  }

  public InventorySummaryDto inAssemblyDemand(Double inAssemblyDemand) {
    this.inAssemblyDemand = inAssemblyDemand;
    return this;
  }

   /**
   * Get inAssemblyDemand
   * @return inAssemblyDemand
  **/
  @ApiModelProperty(value = "")
  public Double getInAssemblyDemand() {
    return inAssemblyDemand;
  }

  public void setInAssemblyDemand(Double inAssemblyDemand) {
    this.inAssemblyDemand = inAssemblyDemand;
  }

  public InventorySummaryDto inAssemblySupply(Double inAssemblySupply) {
    this.inAssemblySupply = inAssemblySupply;
    return this;
  }

   /**
   * Get inAssemblySupply
   * @return inAssemblySupply
  **/
  @ApiModelProperty(value = "")
  public Double getInAssemblySupply() {
    return inAssemblySupply;
  }

  public void setInAssemblySupply(Double inAssemblySupply) {
    this.inAssemblySupply = inAssemblySupply;
  }

  public InventorySummaryDto purchasePrepared(Double purchasePrepared) {
    this.purchasePrepared = purchasePrepared;
    return this;
  }

   /**
   * Get purchasePrepared
   * @return purchasePrepared
  **/
  @ApiModelProperty(value = "")
  public Double getPurchasePrepared() {
    return purchasePrepared;
  }

  public void setPurchasePrepared(Double purchasePrepared) {
    this.purchasePrepared = purchasePrepared;
  }

  public InventorySummaryDto purchaseOrders(Double purchaseOrders) {
    this.purchaseOrders = purchaseOrders;
    return this;
  }

   /**
   * Get purchaseOrders
   * @return purchaseOrders
  **/
  @ApiModelProperty(value = "")
  public Double getPurchaseOrders() {
    return purchaseOrders;
  }

  public void setPurchaseOrders(Double purchaseOrders) {
    this.purchaseOrders = purchaseOrders;
  }

  public InventorySummaryDto poReceipts(Double poReceipts) {
    this.poReceipts = poReceipts;
    return this;
  }

   /**
   * Get poReceipts
   * @return poReceipts
  **/
  @ApiModelProperty(value = "")
  public Double getPoReceipts() {
    return poReceipts;
  }

  public void setPoReceipts(Double poReceipts) {
    this.poReceipts = poReceipts;
  }

  public InventorySummaryDto expired(Double expired) {
    this.expired = expired;
    return this;
  }

   /**
   * Get expired
   * @return expired
  **/
  @ApiModelProperty(value = "")
  public Double getExpired() {
    return expired;
  }

  public void setExpired(Double expired) {
    this.expired = expired;
  }

  public InventorySummaryDto onHand(Double onHand) {
    this.onHand = onHand;
    return this;
  }

   /**
   * Get onHand
   * @return onHand
  **/
  @ApiModelProperty(value = "")
  public Double getOnHand() {
    return onHand;
  }

  public void setOnHand(Double onHand) {
    this.onHand = onHand;
  }

  public InventorySummaryDto soToPurchase(Double soToPurchase) {
    this.soToPurchase = soToPurchase;
    return this;
  }

   /**
   * Get soToPurchase
   * @return soToPurchase
  **/
  @ApiModelProperty(value = "")
  public Double getSoToPurchase() {
    return soToPurchase;
  }

  public void setSoToPurchase(Double soToPurchase) {
    this.soToPurchase = soToPurchase;
  }

  public InventorySummaryDto purchaseForSO(Double purchaseForSO) {
    this.purchaseForSO = purchaseForSO;
    return this;
  }

   /**
   * Get purchaseForSO
   * @return purchaseForSO
  **/
  @ApiModelProperty(value = "")
  public Double getPurchaseForSO() {
    return purchaseForSO;
  }

  public void setPurchaseForSO(Double purchaseForSO) {
    this.purchaseForSO = purchaseForSO;
  }

  public InventorySummaryDto purchaseForSOPrepared(Double purchaseForSOPrepared) {
    this.purchaseForSOPrepared = purchaseForSOPrepared;
    return this;
  }

   /**
   * Get purchaseForSOPrepared
   * @return purchaseForSOPrepared
  **/
  @ApiModelProperty(value = "")
  public Double getPurchaseForSOPrepared() {
    return purchaseForSOPrepared;
  }

  public void setPurchaseForSOPrepared(Double purchaseForSOPrepared) {
    this.purchaseForSOPrepared = purchaseForSOPrepared;
  }

  public InventorySummaryDto purchaseForSOReceipts(Double purchaseForSOReceipts) {
    this.purchaseForSOReceipts = purchaseForSOReceipts;
    return this;
  }

   /**
   * Get purchaseForSOReceipts
   * @return purchaseForSOReceipts
  **/
  @ApiModelProperty(value = "")
  public Double getPurchaseForSOReceipts() {
    return purchaseForSOReceipts;
  }

  public void setPurchaseForSOReceipts(Double purchaseForSOReceipts) {
    this.purchaseForSOReceipts = purchaseForSOReceipts;
  }

  public InventorySummaryDto soToDropShip(Double soToDropShip) {
    this.soToDropShip = soToDropShip;
    return this;
  }

   /**
   * Get soToDropShip
   * @return soToDropShip
  **/
  @ApiModelProperty(value = "")
  public Double getSoToDropShip() {
    return soToDropShip;
  }

  public void setSoToDropShip(Double soToDropShip) {
    this.soToDropShip = soToDropShip;
  }

  public InventorySummaryDto dropShipForSO(Double dropShipForSO) {
    this.dropShipForSO = dropShipForSO;
    return this;
  }

   /**
   * Get dropShipForSO
   * @return dropShipForSO
  **/
  @ApiModelProperty(value = "")
  public Double getDropShipForSO() {
    return dropShipForSO;
  }

  public void setDropShipForSO(Double dropShipForSO) {
    this.dropShipForSO = dropShipForSO;
  }

  public InventorySummaryDto dropShipForSOPrepared(Double dropShipForSOPrepared) {
    this.dropShipForSOPrepared = dropShipForSOPrepared;
    return this;
  }

   /**
   * Get dropShipForSOPrepared
   * @return dropShipForSOPrepared
  **/
  @ApiModelProperty(value = "")
  public Double getDropShipForSOPrepared() {
    return dropShipForSOPrepared;
  }

  public void setDropShipForSOPrepared(Double dropShipForSOPrepared) {
    this.dropShipForSOPrepared = dropShipForSOPrepared;
  }

  public InventorySummaryDto dropShipForSOReceipts(Double dropShipForSOReceipts) {
    this.dropShipForSOReceipts = dropShipForSOReceipts;
    return this;
  }

   /**
   * Get dropShipForSOReceipts
   * @return dropShipForSOReceipts
  **/
  @ApiModelProperty(value = "")
  public Double getDropShipForSOReceipts() {
    return dropShipForSOReceipts;
  }

  public void setDropShipForSOReceipts(Double dropShipForSOReceipts) {
    this.dropShipForSOReceipts = dropShipForSOReceipts;
  }

  public InventorySummaryDto baseUnit(String baseUnit) {
    this.baseUnit = baseUnit;
    return this;
  }

   /**
   * Get baseUnit
   * @return baseUnit
  **/
  @ApiModelProperty(value = "")
  public String getBaseUnit() {
    return baseUnit;
  }

  public void setBaseUnit(String baseUnit) {
    this.baseUnit = baseUnit;
  }

  public InventorySummaryDto estimatedUnitCost(Double estimatedUnitCost) {
    this.estimatedUnitCost = estimatedUnitCost;
    return this;
  }

   /**
   * Get estimatedUnitCost
   * @return estimatedUnitCost
  **/
  @ApiModelProperty(value = "")
  public Double getEstimatedUnitCost() {
    return estimatedUnitCost;
  }

  public void setEstimatedUnitCost(Double estimatedUnitCost) {
    this.estimatedUnitCost = estimatedUnitCost;
  }

  public InventorySummaryDto estimatedTotalCost(Double estimatedTotalCost) {
    this.estimatedTotalCost = estimatedTotalCost;
    return this;
  }

   /**
   * Get estimatedTotalCost
   * @return estimatedTotalCost
  **/
  @ApiModelProperty(value = "")
  public Double getEstimatedTotalCost() {
    return estimatedTotalCost;
  }

  public void setEstimatedTotalCost(Double estimatedTotalCost) {
    this.estimatedTotalCost = estimatedTotalCost;
  }

  public InventorySummaryDto extras(Map<String, Object> extras) {
    this.extras = extras;
    return this;
  }

  public InventorySummaryDto putExtrasItem(String key, Object extrasItem) {
    if (this.extras == null) {
      this.extras = new HashMap<>();
    }
    this.extras.put(key, extrasItem);
    return this;
  }

   /**
   * Get extras
   * @return extras
  **/
  @ApiModelProperty(value = "")
  public Map<String, Object> getExtras() {
    return extras;
  }

  public void setExtras(Map<String, Object> extras) {
    this.extras = extras;
  }

  public InventorySummaryDto errorInfo(String errorInfo) {
    this.errorInfo = errorInfo;
    return this;
  }

   /**
   * Get errorInfo
   * @return errorInfo
  **/
  @ApiModelProperty(value = "")
  public String getErrorInfo() {
    return errorInfo;
  }

  public void setErrorInfo(String errorInfo) {
    this.errorInfo = errorInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventorySummaryDto inventorySummaryDto = (InventorySummaryDto) o;
    return Objects.equals(this.inventory, inventorySummaryDto.inventory) &&
        Objects.equals(this.warehouse, inventorySummaryDto.warehouse) &&
        Objects.equals(this.location, inventorySummaryDto.location) &&
        Objects.equals(this.available, inventorySummaryDto.available) &&
        Objects.equals(this.availableForShipment, inventorySummaryDto.availableForShipment) &&
        Objects.equals(this.notAvailable, inventorySummaryDto.notAvailable) &&
        Objects.equals(this.soBooked, inventorySummaryDto.soBooked) &&
        Objects.equals(this.soAllocated, inventorySummaryDto.soAllocated) &&
        Objects.equals(this.soShipped, inventorySummaryDto.soShipped) &&
        Objects.equals(this.soBackOrdered, inventorySummaryDto.soBackOrdered) &&
        Objects.equals(this.inIssues, inventorySummaryDto.inIssues) &&
        Objects.equals(this.inReceipts, inventorySummaryDto.inReceipts) &&
        Objects.equals(this.inTransit, inventorySummaryDto.inTransit) &&
        Objects.equals(this.inAssemblyDemand, inventorySummaryDto.inAssemblyDemand) &&
        Objects.equals(this.inAssemblySupply, inventorySummaryDto.inAssemblySupply) &&
        Objects.equals(this.purchasePrepared, inventorySummaryDto.purchasePrepared) &&
        Objects.equals(this.purchaseOrders, inventorySummaryDto.purchaseOrders) &&
        Objects.equals(this.poReceipts, inventorySummaryDto.poReceipts) &&
        Objects.equals(this.expired, inventorySummaryDto.expired) &&
        Objects.equals(this.onHand, inventorySummaryDto.onHand) &&
        Objects.equals(this.soToPurchase, inventorySummaryDto.soToPurchase) &&
        Objects.equals(this.purchaseForSO, inventorySummaryDto.purchaseForSO) &&
        Objects.equals(this.purchaseForSOPrepared, inventorySummaryDto.purchaseForSOPrepared) &&
        Objects.equals(this.purchaseForSOReceipts, inventorySummaryDto.purchaseForSOReceipts) &&
        Objects.equals(this.soToDropShip, inventorySummaryDto.soToDropShip) &&
        Objects.equals(this.dropShipForSO, inventorySummaryDto.dropShipForSO) &&
        Objects.equals(this.dropShipForSOPrepared, inventorySummaryDto.dropShipForSOPrepared) &&
        Objects.equals(this.dropShipForSOReceipts, inventorySummaryDto.dropShipForSOReceipts) &&
        Objects.equals(this.baseUnit, inventorySummaryDto.baseUnit) &&
        Objects.equals(this.estimatedUnitCost, inventorySummaryDto.estimatedUnitCost) &&
        Objects.equals(this.estimatedTotalCost, inventorySummaryDto.estimatedTotalCost) &&
        Objects.equals(this.extras, inventorySummaryDto.extras) &&
        Objects.equals(this.errorInfo, inventorySummaryDto.errorInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inventory, warehouse, location, available, availableForShipment, notAvailable, soBooked, soAllocated, soShipped, soBackOrdered, inIssues, inReceipts, inTransit, inAssemblyDemand, inAssemblySupply, purchasePrepared, purchaseOrders, poReceipts, expired, onHand, soToPurchase, purchaseForSO, purchaseForSOPrepared, purchaseForSOReceipts, soToDropShip, dropShipForSO, dropShipForSOPrepared, dropShipForSOReceipts, baseUnit, estimatedUnitCost, estimatedTotalCost, extras, errorInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventorySummaryDto {\n");
    
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    warehouse: ").append(toIndentedString(warehouse)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    availableForShipment: ").append(toIndentedString(availableForShipment)).append("\n");
    sb.append("    notAvailable: ").append(toIndentedString(notAvailable)).append("\n");
    sb.append("    soBooked: ").append(toIndentedString(soBooked)).append("\n");
    sb.append("    soAllocated: ").append(toIndentedString(soAllocated)).append("\n");
    sb.append("    soShipped: ").append(toIndentedString(soShipped)).append("\n");
    sb.append("    soBackOrdered: ").append(toIndentedString(soBackOrdered)).append("\n");
    sb.append("    inIssues: ").append(toIndentedString(inIssues)).append("\n");
    sb.append("    inReceipts: ").append(toIndentedString(inReceipts)).append("\n");
    sb.append("    inTransit: ").append(toIndentedString(inTransit)).append("\n");
    sb.append("    inAssemblyDemand: ").append(toIndentedString(inAssemblyDemand)).append("\n");
    sb.append("    inAssemblySupply: ").append(toIndentedString(inAssemblySupply)).append("\n");
    sb.append("    purchasePrepared: ").append(toIndentedString(purchasePrepared)).append("\n");
    sb.append("    purchaseOrders: ").append(toIndentedString(purchaseOrders)).append("\n");
    sb.append("    poReceipts: ").append(toIndentedString(poReceipts)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    onHand: ").append(toIndentedString(onHand)).append("\n");
    sb.append("    soToPurchase: ").append(toIndentedString(soToPurchase)).append("\n");
    sb.append("    purchaseForSO: ").append(toIndentedString(purchaseForSO)).append("\n");
    sb.append("    purchaseForSOPrepared: ").append(toIndentedString(purchaseForSOPrepared)).append("\n");
    sb.append("    purchaseForSOReceipts: ").append(toIndentedString(purchaseForSOReceipts)).append("\n");
    sb.append("    soToDropShip: ").append(toIndentedString(soToDropShip)).append("\n");
    sb.append("    dropShipForSO: ").append(toIndentedString(dropShipForSO)).append("\n");
    sb.append("    dropShipForSOPrepared: ").append(toIndentedString(dropShipForSOPrepared)).append("\n");
    sb.append("    dropShipForSOReceipts: ").append(toIndentedString(dropShipForSOReceipts)).append("\n");
    sb.append("    baseUnit: ").append(toIndentedString(baseUnit)).append("\n");
    sb.append("    estimatedUnitCost: ").append(toIndentedString(estimatedUnitCost)).append("\n");
    sb.append("    estimatedTotalCost: ").append(toIndentedString(estimatedTotalCost)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("    errorInfo: ").append(toIndentedString(errorInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

