/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import no.systema.visma.v1client.model.AttachmentDto;
import no.systema.visma.v1client.model.BranchNumberDto;
import no.systema.visma.v1client.model.InventoryReceiptLineDto;

/**
 * This class represents a inventory issue in InventoryIssueController. Used by getting data.
 */
@ApiModel(description = "This class represents a inventory issue in InventoryIssueController. Used by getting data.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T15:04:09.234+02:00")
public class InventoryReceiptDto {
  @JsonProperty("totalCost")
  private Double totalCost = null;

  @JsonProperty("controlCost")
  private Double controlCost = null;

  @JsonProperty("transferNumber")
  private String transferNumber = null;

  @JsonProperty("receiptLines")
  private List<InventoryReceiptLineDto> receiptLines = null;

  @JsonProperty("referenceNumber")
  private String referenceNumber = null;

  /**
   *  The current status of the receipt. The following options are available:   On Hold:The receipt/issue is a draft and can be edited. Receipts with this status cannot be released.  Balanced: The receipt/issue data has been validated by the system and the receipt can be released. It also can be modified or deleted, but changes can be saved only if the receipt is balanced.  Released: The receipt/issue has been released and cannot be edited or deleted.
   */
  public enum StatusEnum {
    HOLD("Hold"),
    
    BALANCED("Balanced"),
    
    RELEASED("Released");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("hold")
  private Boolean hold = null;

  @JsonProperty("date")
  private LocalDateTime date = null;

  @JsonProperty("postPeriod")
  private String postPeriod = null;

  @JsonProperty("externalReference")
  private String externalReference = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("totalQuantity")
  private Double totalQuantity = null;

  @JsonProperty("controlQuantity")
  private Double controlQuantity = null;

  @JsonProperty("batchNumber")
  private String batchNumber = null;

  @JsonProperty("lastModifiedDateTime")
  private LocalDateTime lastModifiedDateTime = null;

  @JsonProperty("branchNumber")
  private BranchNumberDto branchNumber = null;

  @JsonProperty("attachments")
  private List<AttachmentDto> attachments = null;

  public InventoryReceiptDto totalCost(Double totalCost) {
    this.totalCost = totalCost;
    return this;
  }

   /**
   * The total cost of the inventory items received. The system automatically calculates this value as a sum of all extended cost values of all received inventory items listed in the Transaction Details tab of this form.
   * @return totalCost
  **/
  @ApiModelProperty(value = "The total cost of the inventory items received. The system automatically calculates this value as a sum of all extended cost values of all received inventory items listed in the Transaction Details tab of this form.")
  public Double getTotalCost() {
    return totalCost;
  }

  public void setTotalCost(Double totalCost) {
    this.totalCost = totalCost;
  }

  public InventoryReceiptDto controlCost(Double controlCost) {
    this.controlCost = controlCost;
    return this;
  }

   /**
   * The total cost of the inventory items to be received. Control Cost is available only if the Validate Document Totals on Entry option is selected on the Inventory Preferences form. The user enters this value manually to confirm the total cost as calculated automatically for the document. If the Control Cost and Total Cost values do not match, the system generates a warning message and the document cannot be saved.
   * @return controlCost
  **/
  @ApiModelProperty(value = "The total cost of the inventory items to be received. Control Cost is available only if the Validate Document Totals on Entry option is selected on the Inventory Preferences form. The user enters this value manually to confirm the total cost as calculated automatically for the document. If the Control Cost and Total Cost values do not match, the system generates a warning message and the document cannot be saved.")
  public Double getControlCost() {
    return controlCost;
  }

  public void setControlCost(Double controlCost) {
    this.controlCost = controlCost;
  }

  public InventoryReceiptDto transferNumber(String transferNumber) {
    this.transferNumber = transferNumber;
    return this;
  }

   /**
   * The transfer number for the receipt operation. (Enter this number only if the two-step transfer operation is performed.)
   * @return transferNumber
  **/
  @ApiModelProperty(value = "The transfer number for the receipt operation. (Enter this number only if the two-step transfer operation is performed.)")
  public String getTransferNumber() {
    return transferNumber;
  }

  public void setTransferNumber(String transferNumber) {
    this.transferNumber = transferNumber;
  }

  public InventoryReceiptDto receiptLines(List<InventoryReceiptLineDto> receiptLines) {
    this.receiptLines = receiptLines;
    return this;
  }

  public InventoryReceiptDto addReceiptLinesItem(InventoryReceiptLineDto receiptLinesItem) {
    if (this.receiptLines == null) {
      this.receiptLines = new ArrayList<>();
    }
    this.receiptLines.add(receiptLinesItem);
    return this;
  }

   /**
   * The inventory receipt lines
   * @return receiptLines
  **/
  @ApiModelProperty(value = "The inventory receipt lines")
  public List<InventoryReceiptLineDto> getReceiptLines() {
    return receiptLines;
  }

  public void setReceiptLines(List<InventoryReceiptLineDto> receiptLines) {
    this.receiptLines = receiptLines;
  }

  public InventoryReceiptDto referenceNumber(String referenceNumber) {
    this.referenceNumber = referenceNumber;
    return this;
  }

   /**
   * The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the Inventory Preferences IN.10.10.00) form.
   * @return referenceNumber
  **/
  @ApiModelProperty(value = "The unique reference number of the receipt, which the system automatically assigns according to the numbering sequence selected for receipts on the Inventory Preferences IN.10.10.00) form.")
  public String getReferenceNumber() {
    return referenceNumber;
  }

  public void setReferenceNumber(String referenceNumber) {
    this.referenceNumber = referenceNumber;
  }

  public InventoryReceiptDto status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   *  The current status of the receipt. The following options are available:   On Hold:The receipt/issue is a draft and can be edited. Receipts with this status cannot be released.  Balanced: The receipt/issue data has been validated by the system and the receipt can be released. It also can be modified or deleted, but changes can be saved only if the receipt is balanced.  Released: The receipt/issue has been released and cannot be edited or deleted.
   * @return status
  **/
  @ApiModelProperty(value = " The current status of the receipt. The following options are available:   On Hold:The receipt/issue is a draft and can be edited. Receipts with this status cannot be released.  Balanced: The receipt/issue data has been validated by the system and the receipt can be released. It also can be modified or deleted, but changes can be saved only if the receipt is balanced.  Released: The receipt/issue has been released and cannot be edited or deleted.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public InventoryReceiptDto hold(Boolean hold) {
    this.hold = hold;
    return this;
  }

   /**
   * A check box that you select to give the receipt the On Hold status. Clear the check box to save the receipt with the Balanced status.
   * @return hold
  **/
  @ApiModelProperty(value = "A check box that you select to give the receipt the On Hold status. Clear the check box to save the receipt with the Balanced status.")
  public Boolean isHold() {
    return hold;
  }

  public void setHold(Boolean hold) {
    this.hold = hold;
  }

  public InventoryReceiptDto date(LocalDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * The date when the receipt was created. All transactions included in this document will have this transaction date.
   * @return date
  **/
  @ApiModelProperty(value = "The date when the receipt was created. All transactions included in this document will have this transaction date.")
  public LocalDateTime getDate() {
    return date;
  }

  public void setDate(LocalDateTime date) {
    this.date = date;
  }

  public InventoryReceiptDto postPeriod(String postPeriod) {
    this.postPeriod = postPeriod;
    return this;
  }

   /**
   * The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.
   * @return postPeriod
  **/
  @ApiModelProperty(value = "The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.")
  public String getPostPeriod() {
    return postPeriod;
  }

  public void setPostPeriod(String postPeriod) {
    this.postPeriod = postPeriod;
  }

  public InventoryReceiptDto externalReference(String externalReference) {
    this.externalReference = externalReference;
    return this;
  }

   /**
   * The external reference number of the inventory issue document (for example, the vendor’s reference code).
   * @return externalReference
  **/
  @ApiModelProperty(value = "The external reference number of the inventory issue document (for example, the vendor’s reference code).")
  public String getExternalReference() {
    return externalReference;
  }

  public void setExternalReference(String externalReference) {
    this.externalReference = externalReference;
  }

  public InventoryReceiptDto description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A brief description of the inventory issue or its transactions.
   * @return description
  **/
  @ApiModelProperty(value = "A brief description of the inventory issue or its transactions.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public InventoryReceiptDto totalQuantity(Double totalQuantity) {
    this.totalQuantity = totalQuantity;
    return this;
  }

   /**
   * The total quantity of inventory items, which the system calculates automatically, for the document.
   * @return totalQuantity
  **/
  @ApiModelProperty(value = "The total quantity of inventory items, which the system calculates automatically, for the document.")
  public Double getTotalQuantity() {
    return totalQuantity;
  }

  public void setTotalQuantity(Double totalQuantity) {
    this.totalQuantity = totalQuantity;
  }

  public InventoryReceiptDto controlQuantity(Double controlQuantity) {
    this.controlQuantity = controlQuantity;
    return this;
  }

   /**
   * The manually entered quantity of inventory items. Control Qty. is available only if the Validate Document Totals on Entry option is selected on the Inventory Preferences form. If the Control Qty. and Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.
   * @return controlQuantity
  **/
  @ApiModelProperty(value = "The manually entered quantity of inventory items. Control Qty. is available only if the Validate Document Totals on Entry option is selected on the Inventory Preferences form. If the Control Qty. and Total Qty.values do not match, the system generates a warning message and the issue cannot be saved.")
  public Double getControlQuantity() {
    return controlQuantity;
  }

  public void setControlQuantity(Double controlQuantity) {
    this.controlQuantity = controlQuantity;
  }

  public InventoryReceiptDto batchNumber(String batchNumber) {
    this.batchNumber = batchNumber;
    return this;
  }

   /**
   * The reference number of the batch generated for the receipt. Click the number to open the Journal Transactions (GL.30.10.00) form and view the details of the transactions.
   * @return batchNumber
  **/
  @ApiModelProperty(value = "The reference number of the batch generated for the receipt. Click the number to open the Journal Transactions (GL.30.10.00) form and view the details of the transactions.")
  public String getBatchNumber() {
    return batchNumber;
  }

  public void setBatchNumber(String batchNumber) {
    this.batchNumber = batchNumber;
  }

  public InventoryReceiptDto lastModifiedDateTime(LocalDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
    return this;
  }

   /**
   * The date when the document was last modified.
   * @return lastModifiedDateTime
  **/
  @ApiModelProperty(value = "The date when the document was last modified.")
  public LocalDateTime getLastModifiedDateTime() {
    return lastModifiedDateTime;
  }

  public void setLastModifiedDateTime(LocalDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
  }

  public InventoryReceiptDto branchNumber(BranchNumberDto branchNumber) {
    this.branchNumber = branchNumber;
    return this;
  }

   /**
   * The Branch associated
   * @return branchNumber
  **/
  @ApiModelProperty(value = "The Branch associated")
  public BranchNumberDto getBranchNumber() {
    return branchNumber;
  }

  public void setBranchNumber(BranchNumberDto branchNumber) {
    this.branchNumber = branchNumber;
  }

  public InventoryReceiptDto attachments(List<AttachmentDto> attachments) {
    this.attachments = attachments;
    return this;
  }

  public InventoryReceiptDto addAttachmentsItem(AttachmentDto attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * The data containing information about the document attachments
   * @return attachments
  **/
  @ApiModelProperty(value = "The data containing information about the document attachments")
  public List<AttachmentDto> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<AttachmentDto> attachments) {
    this.attachments = attachments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryReceiptDto inventoryReceiptDto = (InventoryReceiptDto) o;
    return Objects.equals(this.totalCost, inventoryReceiptDto.totalCost) &&
        Objects.equals(this.controlCost, inventoryReceiptDto.controlCost) &&
        Objects.equals(this.transferNumber, inventoryReceiptDto.transferNumber) &&
        Objects.equals(this.receiptLines, inventoryReceiptDto.receiptLines) &&
        Objects.equals(this.referenceNumber, inventoryReceiptDto.referenceNumber) &&
        Objects.equals(this.status, inventoryReceiptDto.status) &&
        Objects.equals(this.hold, inventoryReceiptDto.hold) &&
        Objects.equals(this.date, inventoryReceiptDto.date) &&
        Objects.equals(this.postPeriod, inventoryReceiptDto.postPeriod) &&
        Objects.equals(this.externalReference, inventoryReceiptDto.externalReference) &&
        Objects.equals(this.description, inventoryReceiptDto.description) &&
        Objects.equals(this.totalQuantity, inventoryReceiptDto.totalQuantity) &&
        Objects.equals(this.controlQuantity, inventoryReceiptDto.controlQuantity) &&
        Objects.equals(this.batchNumber, inventoryReceiptDto.batchNumber) &&
        Objects.equals(this.lastModifiedDateTime, inventoryReceiptDto.lastModifiedDateTime) &&
        Objects.equals(this.branchNumber, inventoryReceiptDto.branchNumber) &&
        Objects.equals(this.attachments, inventoryReceiptDto.attachments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalCost, controlCost, transferNumber, receiptLines, referenceNumber, status, hold, date, postPeriod, externalReference, description, totalQuantity, controlQuantity, batchNumber, lastModifiedDateTime, branchNumber, attachments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryReceiptDto {\n");
    
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    controlCost: ").append(toIndentedString(controlCost)).append("\n");
    sb.append("    transferNumber: ").append(toIndentedString(transferNumber)).append("\n");
    sb.append("    receiptLines: ").append(toIndentedString(receiptLines)).append("\n");
    sb.append("    referenceNumber: ").append(toIndentedString(referenceNumber)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    hold: ").append(toIndentedString(hold)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    postPeriod: ").append(toIndentedString(postPeriod)).append("\n");
    sb.append("    externalReference: ").append(toIndentedString(externalReference)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    totalQuantity: ").append(toIndentedString(totalQuantity)).append("\n");
    sb.append("    controlQuantity: ").append(toIndentedString(controlQuantity)).append("\n");
    sb.append("    batchNumber: ").append(toIndentedString(batchNumber)).append("\n");
    sb.append("    lastModifiedDateTime: ").append(toIndentedString(lastModifiedDateTime)).append("\n");
    sb.append("    branchNumber: ").append(toIndentedString(branchNumber)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

