/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import no.systema.visma.v1client.model.CustomerNumberDto;
import no.systema.visma.v1client.model.DepartmentIdDescriptionDto;
import no.systema.visma.v1client.model.EmployeeNumberNameDto;
import no.systema.visma.v1client.model.ExpenseClaimDetailDto;
import no.systema.visma.v1client.model.LocationNameDescriptionDto;

/**
 * This class represents a Expense Claim in ExpenseClaimController. Used for getting data.
 */
@ApiModel(description = "This class represents a Expense Claim in ExpenseClaimController. Used for getting data.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T15:04:09.234+02:00")
public class ExpenseClaimDto {
  @JsonProperty("refNbr")
  private String refNbr = null;

  /**
   * The current status of the expense claim: On Hold/Pending Approval/Approved/Rejected/Released.
   */
  public enum StatusEnum {
    HOLD("Hold"),
    
    PENDINGAPPROVAL("PendingApproval"),
    
    APPROVED("Approved"),
    
    REJECTED("Rejected"),
    
    RELEASED("Released");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("status")
  private StatusEnum status = null;

  /**
   * The approval status of the claim
   */
  public enum ApprovalStatusEnum {
    NEW("New"),
    
    CANCELED("Canceled"),
    
    SENTTOAPPROVAL("SentToApproval"),
    
    RECEIVEDBYAPPROVAL("ReceivedByApproval"),
    
    INPROGRESSAPPROVAL("InProgressApproval"),
    
    REJECTEDINAPPROVAL("RejectedInApproval"),
    
    APPROVEDINAPPROVAL("ApprovedInApproval"),
    
    ACTIVEWORKFLOWAPPROVAL("ActiveWorkflowApproval");

    private String value;

    ApprovalStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ApprovalStatusEnum fromValue(String text) {
      for (ApprovalStatusEnum b : ApprovalStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("approvalStatus")
  private ApprovalStatusEnum approvalStatus = null;

  @JsonProperty("date")
  private LocalDateTime date = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("claimedBy")
  private EmployeeNumberNameDto claimedBy = null;

  @JsonProperty("claimTotal")
  private Double claimTotal = null;

  @JsonProperty("vatTaxableTotal")
  private Double vatTaxableTotal = null;

  @JsonProperty("vatExemptTotal")
  private Double vatExemptTotal = null;

  @JsonProperty("customer")
  private CustomerNumberDto customer = null;

  @JsonProperty("currency")
  private String currency = null;

  @JsonProperty("approvalDate")
  private LocalDateTime approvalDate = null;

  @JsonProperty("department")
  private DepartmentIdDescriptionDto department = null;

  @JsonProperty("location")
  private LocationNameDescriptionDto location = null;

  @JsonProperty("lastModifiedDateTime")
  private LocalDateTime lastModifiedDateTime = null;

  @JsonProperty("details")
  private List<ExpenseClaimDetailDto> details = null;

  @JsonProperty("approvalStatusText")
  private String approvalStatusText = null;

  @JsonProperty("extras")
  private Map<String, Object> extras = null;

  @JsonProperty("errorInfo")
  private String errorInfo = null;

  public ExpenseClaimDto refNbr(String refNbr) {
    this.refNbr = refNbr;
    return this;
  }

   /**
   * The unique reference number of the expense claim document.
   * @return refNbr
  **/
  @ApiModelProperty(value = "The unique reference number of the expense claim document.")
  public String getRefNbr() {
    return refNbr;
  }

  public void setRefNbr(String refNbr) {
    this.refNbr = refNbr;
  }

  public ExpenseClaimDto status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The current status of the expense claim: On Hold/Pending Approval/Approved/Rejected/Released.
   * @return status
  **/
  @ApiModelProperty(value = "The current status of the expense claim: On Hold/Pending Approval/Approved/Rejected/Released.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ExpenseClaimDto approvalStatus(ApprovalStatusEnum approvalStatus) {
    this.approvalStatus = approvalStatus;
    return this;
  }

   /**
   * The approval status of the claim
   * @return approvalStatus
  **/
  @ApiModelProperty(value = "The approval status of the claim")
  public ApprovalStatusEnum getApprovalStatus() {
    return approvalStatus;
  }

  public void setApprovalStatus(ApprovalStatusEnum approvalStatus) {
    this.approvalStatus = approvalStatus;
  }

  public ExpenseClaimDto date(LocalDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * The date when the claim was entered.
   * @return date
  **/
  @ApiModelProperty(value = "The date when the claim was entered.")
  public LocalDateTime getDate() {
    return date;
  }

  public void setDate(LocalDateTime date) {
    this.date = date;
  }

  public ExpenseClaimDto description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the claim.
   * @return description
  **/
  @ApiModelProperty(value = "A description of the claim.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ExpenseClaimDto claimedBy(EmployeeNumberNameDto claimedBy) {
    this.claimedBy = claimedBy;
    return this;
  }

   /**
   * The employee who is claiming the expenses. If the claim is released, an Accounts Payable bill will be generated to this employee.
   * @return claimedBy
  **/
  @ApiModelProperty(value = "The employee who is claiming the expenses. If the claim is released, an Accounts Payable bill will be generated to this employee.")
  public EmployeeNumberNameDto getClaimedBy() {
    return claimedBy;
  }

  public void setClaimedBy(EmployeeNumberNameDto claimedBy) {
    this.claimedBy = claimedBy;
  }

  public ExpenseClaimDto claimTotal(Double claimTotal) {
    this.claimTotal = claimTotal;
    return this;
  }

   /**
   * The total amount of the claim.
   * @return claimTotal
  **/
  @ApiModelProperty(value = "The total amount of the claim.")
  public Double getClaimTotal() {
    return claimTotal;
  }

  public void setClaimTotal(Double claimTotal) {
    this.claimTotal = claimTotal;
  }

  public ExpenseClaimDto vatTaxableTotal(Double vatTaxableTotal) {
    this.vatTaxableTotal = vatTaxableTotal;
    return this;
  }

   /**
   * The document total that is subjected to VAT.
   * @return vatTaxableTotal
  **/
  @ApiModelProperty(value = "The document total that is subjected to VAT.")
  public Double getVatTaxableTotal() {
    return vatTaxableTotal;
  }

  public void setVatTaxableTotal(Double vatTaxableTotal) {
    this.vatTaxableTotal = vatTaxableTotal;
  }

  public ExpenseClaimDto vatExemptTotal(Double vatExemptTotal) {
    this.vatExemptTotal = vatExemptTotal;
    return this;
  }

   /**
   * The document total that is exempt from VAT.
   * @return vatExemptTotal
  **/
  @ApiModelProperty(value = "The document total that is exempt from VAT.")
  public Double getVatExemptTotal() {
    return vatExemptTotal;
  }

  public void setVatExemptTotal(Double vatExemptTotal) {
    this.vatExemptTotal = vatExemptTotal;
  }

  public ExpenseClaimDto customer(CustomerNumberDto customer) {
    this.customer = customer;
    return this;
  }

   /**
   * The applicable customer.
   * @return customer
  **/
  @ApiModelProperty(value = "The applicable customer.")
  public CustomerNumberDto getCustomer() {
    return customer;
  }

  public void setCustomer(CustomerNumberDto customer) {
    this.customer = customer;
  }

  public ExpenseClaimDto currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * The currency of the claim.
   * @return currency
  **/
  @ApiModelProperty(value = "The currency of the claim.")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public ExpenseClaimDto approvalDate(LocalDateTime approvalDate) {
    this.approvalDate = approvalDate;
    return this;
  }

   /**
   * The date when the claim was approved.
   * @return approvalDate
  **/
  @ApiModelProperty(value = "The date when the claim was approved.")
  public LocalDateTime getApprovalDate() {
    return approvalDate;
  }

  public void setApprovalDate(LocalDateTime approvalDate) {
    this.approvalDate = approvalDate;
  }

  public ExpenseClaimDto department(DepartmentIdDescriptionDto department) {
    this.department = department;
    return this;
  }

   /**
   * The department associated with the expense claim.
   * @return department
  **/
  @ApiModelProperty(value = "The department associated with the expense claim.")
  public DepartmentIdDescriptionDto getDepartment() {
    return department;
  }

  public void setDepartment(DepartmentIdDescriptionDto department) {
    this.department = department;
  }

  public ExpenseClaimDto location(LocationNameDescriptionDto location) {
    this.location = location;
    return this;
  }

   /**
   * The company location associated with the claim.
   * @return location
  **/
  @ApiModelProperty(value = "The company location associated with the claim.")
  public LocationNameDescriptionDto getLocation() {
    return location;
  }

  public void setLocation(LocationNameDescriptionDto location) {
    this.location = location;
  }

  public ExpenseClaimDto lastModifiedDateTime(LocalDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
    return this;
  }

   /**
   * The lastest time the expense claim was modified
   * @return lastModifiedDateTime
  **/
  @ApiModelProperty(value = "The lastest time the expense claim was modified")
  public LocalDateTime getLastModifiedDateTime() {
    return lastModifiedDateTime;
  }

  public void setLastModifiedDateTime(LocalDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
  }

  public ExpenseClaimDto details(List<ExpenseClaimDetailDto> details) {
    this.details = details;
    return this;
  }

  public ExpenseClaimDto addDetailsItem(ExpenseClaimDetailDto detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

   /**
   * Expense Claim detail information
   * @return details
  **/
  @ApiModelProperty(value = "Expense Claim detail information")
  public List<ExpenseClaimDetailDto> getDetails() {
    return details;
  }

  public void setDetails(List<ExpenseClaimDetailDto> details) {
    this.details = details;
  }

  public ExpenseClaimDto approvalStatusText(String approvalStatusText) {
    this.approvalStatusText = approvalStatusText;
    return this;
  }

   /**
   * Get approvalStatusText
   * @return approvalStatusText
  **/
  @ApiModelProperty(value = "")
  public String getApprovalStatusText() {
    return approvalStatusText;
  }

  public void setApprovalStatusText(String approvalStatusText) {
    this.approvalStatusText = approvalStatusText;
  }

  public ExpenseClaimDto extras(Map<String, Object> extras) {
    this.extras = extras;
    return this;
  }

  public ExpenseClaimDto putExtrasItem(String key, Object extrasItem) {
    if (this.extras == null) {
      this.extras = new HashMap<>();
    }
    this.extras.put(key, extrasItem);
    return this;
  }

   /**
   * Get extras
   * @return extras
  **/
  @ApiModelProperty(value = "")
  public Map<String, Object> getExtras() {
    return extras;
  }

  public void setExtras(Map<String, Object> extras) {
    this.extras = extras;
  }

  public ExpenseClaimDto errorInfo(String errorInfo) {
    this.errorInfo = errorInfo;
    return this;
  }

   /**
   * Get errorInfo
   * @return errorInfo
  **/
  @ApiModelProperty(value = "")
  public String getErrorInfo() {
    return errorInfo;
  }

  public void setErrorInfo(String errorInfo) {
    this.errorInfo = errorInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpenseClaimDto expenseClaimDto = (ExpenseClaimDto) o;
    return Objects.equals(this.refNbr, expenseClaimDto.refNbr) &&
        Objects.equals(this.status, expenseClaimDto.status) &&
        Objects.equals(this.approvalStatus, expenseClaimDto.approvalStatus) &&
        Objects.equals(this.date, expenseClaimDto.date) &&
        Objects.equals(this.description, expenseClaimDto.description) &&
        Objects.equals(this.claimedBy, expenseClaimDto.claimedBy) &&
        Objects.equals(this.claimTotal, expenseClaimDto.claimTotal) &&
        Objects.equals(this.vatTaxableTotal, expenseClaimDto.vatTaxableTotal) &&
        Objects.equals(this.vatExemptTotal, expenseClaimDto.vatExemptTotal) &&
        Objects.equals(this.customer, expenseClaimDto.customer) &&
        Objects.equals(this.currency, expenseClaimDto.currency) &&
        Objects.equals(this.approvalDate, expenseClaimDto.approvalDate) &&
        Objects.equals(this.department, expenseClaimDto.department) &&
        Objects.equals(this.location, expenseClaimDto.location) &&
        Objects.equals(this.lastModifiedDateTime, expenseClaimDto.lastModifiedDateTime) &&
        Objects.equals(this.details, expenseClaimDto.details) &&
        Objects.equals(this.approvalStatusText, expenseClaimDto.approvalStatusText) &&
        Objects.equals(this.extras, expenseClaimDto.extras) &&
        Objects.equals(this.errorInfo, expenseClaimDto.errorInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(refNbr, status, approvalStatus, date, description, claimedBy, claimTotal, vatTaxableTotal, vatExemptTotal, customer, currency, approvalDate, department, location, lastModifiedDateTime, details, approvalStatusText, extras, errorInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpenseClaimDto {\n");
    
    sb.append("    refNbr: ").append(toIndentedString(refNbr)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    approvalStatus: ").append(toIndentedString(approvalStatus)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    claimedBy: ").append(toIndentedString(claimedBy)).append("\n");
    sb.append("    claimTotal: ").append(toIndentedString(claimTotal)).append("\n");
    sb.append("    vatTaxableTotal: ").append(toIndentedString(vatTaxableTotal)).append("\n");
    sb.append("    vatExemptTotal: ").append(toIndentedString(vatExemptTotal)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    approvalDate: ").append(toIndentedString(approvalDate)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    lastModifiedDateTime: ").append(toIndentedString(lastModifiedDateTime)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    approvalStatusText: ").append(toIndentedString(approvalStatusText)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("    errorInfo: ").append(toIndentedString(errorInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

