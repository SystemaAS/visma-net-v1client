/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDateTime;
import no.systema.visma.v1client.model.AccountNumberDto;
import no.systema.visma.v1client.model.BranchNumberDto;
import no.systema.visma.v1client.model.SubAccountDescriptionDto;
import no.systema.visma.v1client.model.VatZoneDto;

/**
 * EntryTypeDto
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T15:04:09.234+02:00")
public class EntryTypeDto {
  @JsonProperty("entryTypeId")
  private String entryTypeId = null;

  /**
   * The basic type of cash transaction designated by this entry type: Receipt or Disbursement.
   */
  public enum DisableReceiptEnum {
    DISBURSEMENT("Disbursement"),
    
    RECEIPT("Receipt");

    private String value;

    DisableReceiptEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DisableReceiptEnum fromValue(String text) {
      for (DisableReceiptEnum b : DisableReceiptEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("disableReceipt")
  private DisableReceiptEnum disableReceipt = null;

  @JsonProperty("module")
  private String module = null;

  @JsonProperty("defaultOffsetAccountBranch")
  private BranchNumberDto defaultOffsetAccountBranch = null;

  @JsonProperty("defaultOffsetAccount")
  private AccountNumberDto defaultOffsetAccount = null;

  @JsonProperty("defaultOffsetSubaccount")
  private SubAccountDescriptionDto defaultOffsetSubaccount = null;

  @JsonProperty("reclasificationAccount")
  private AccountNumberDto reclasificationAccount = null;

  @JsonProperty("businessAccount")
  private AccountNumberDto businessAccount = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("useForPaymentsReclasification")
  private Boolean useForPaymentsReclasification = null;

  @JsonProperty("reclasificationAccountOverride")
  private AccountNumberDto reclasificationAccountOverride = null;

  @JsonProperty("offsetAccountOverride")
  private AccountNumberDto offsetAccountOverride = null;

  @JsonProperty("offsetSubaccountOverride")
  private SubAccountDescriptionDto offsetSubaccountOverride = null;

  @JsonProperty("offsetAccountBranch")
  private BranchNumberDto offsetAccountBranch = null;

  @JsonProperty("vatZone")
  private VatZoneDto vatZone = null;

  /**
   * The tax calculation mode to be used by default with this entry type
   */
  public enum TaxCalculationModeEnum {
    TAXSETTING("TaxSetting"),
    
    GROSS("Gross"),
    
    NET("Net");

    private String value;

    TaxCalculationModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TaxCalculationModeEnum fromValue(String text) {
      for (TaxCalculationModeEnum b : TaxCalculationModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("taxCalculationMode")
  private TaxCalculationModeEnum taxCalculationMode = null;

  @JsonProperty("lastModifiedDateTime")
  private LocalDateTime lastModifiedDateTime = null;

  public EntryTypeDto entryTypeId(String entryTypeId) {
    this.entryTypeId = entryTypeId;
    return this;
  }

   /**
   * The entry type, selected by its identifier.
   * @return entryTypeId
  **/
  @ApiModelProperty(value = "The entry type, selected by its identifier.")
  public String getEntryTypeId() {
    return entryTypeId;
  }

  public void setEntryTypeId(String entryTypeId) {
    this.entryTypeId = entryTypeId;
  }

  public EntryTypeDto disableReceipt(DisableReceiptEnum disableReceipt) {
    this.disableReceipt = disableReceipt;
    return this;
  }

   /**
   * The basic type of cash transaction designated by this entry type: Receipt or Disbursement.
   * @return disableReceipt
  **/
  @ApiModelProperty(value = "The basic type of cash transaction designated by this entry type: Receipt or Disbursement.")
  public DisableReceiptEnum getDisableReceipt() {
    return disableReceipt;
  }

  public void setDisableReceipt(DisableReceiptEnum disableReceipt) {
    this.disableReceipt = disableReceipt;
  }

  public EntryTypeDto module(String module) {
    this.module = module;
    return this;
  }

   /**
   * The way the entry type is used in the system.
   * @return module
  **/
  @ApiModelProperty(value = "The way the entry type is used in the system.")
  public String getModule() {
    return module;
  }

  public void setModule(String module) {
    this.module = module;
  }

  public EntryTypeDto defaultOffsetAccountBranch(BranchNumberDto defaultOffsetAccountBranch) {
    this.defaultOffsetAccountBranch = defaultOffsetAccountBranch;
    return this;
  }

   /**
   * The branch to which the default offset account belongs.
   * @return defaultOffsetAccountBranch
  **/
  @ApiModelProperty(value = "The branch to which the default offset account belongs.")
  public BranchNumberDto getDefaultOffsetAccountBranch() {
    return defaultOffsetAccountBranch;
  }

  public void setDefaultOffsetAccountBranch(BranchNumberDto defaultOffsetAccountBranch) {
    this.defaultOffsetAccountBranch = defaultOffsetAccountBranch;
  }

  public EntryTypeDto defaultOffsetAccount(AccountNumberDto defaultOffsetAccount) {
    this.defaultOffsetAccount = defaultOffsetAccount;
    return this;
  }

   /**
   * The account that is used by default as the offset account for this entry type.
   * @return defaultOffsetAccount
  **/
  @ApiModelProperty(value = "The account that is used by default as the offset account for this entry type.")
  public AccountNumberDto getDefaultOffsetAccount() {
    return defaultOffsetAccount;
  }

  public void setDefaultOffsetAccount(AccountNumberDto defaultOffsetAccount) {
    this.defaultOffsetAccount = defaultOffsetAccount;
  }

  public EntryTypeDto defaultOffsetSubaccount(SubAccountDescriptionDto defaultOffsetSubaccount) {
    this.defaultOffsetSubaccount = defaultOffsetSubaccount;
    return this;
  }

   /**
   * The corresponding subaccount.
   * @return defaultOffsetSubaccount
  **/
  @ApiModelProperty(value = "The corresponding subaccount.")
  public SubAccountDescriptionDto getDefaultOffsetSubaccount() {
    return defaultOffsetSubaccount;
  }

  public void setDefaultOffsetSubaccount(SubAccountDescriptionDto defaultOffsetSubaccount) {
    this.defaultOffsetSubaccount = defaultOffsetSubaccount;
  }

  public EntryTypeDto reclasificationAccount(AccountNumberDto reclasificationAccount) {
    this.reclasificationAccount = reclasificationAccount;
    return this;
  }

   /**
   * The cash account that is used to temporary hold payments that came to the bank account but cannot be entered as valid payments because the customer or vendor is unknown.  The parameter is used together with the Use for Payments Reclassification check box.
   * @return reclasificationAccount
  **/
  @ApiModelProperty(value = "The cash account that is used to temporary hold payments that came to the bank account but cannot be entered as valid payments because the customer or vendor is unknown.  The parameter is used together with the Use for Payments Reclassification check box.")
  public AccountNumberDto getReclasificationAccount() {
    return reclasificationAccount;
  }

  public void setReclasificationAccount(AccountNumberDto reclasificationAccount) {
    this.reclasificationAccount = reclasificationAccount;
  }

  public EntryTypeDto businessAccount(AccountNumberDto businessAccount) {
    this.businessAccount = businessAccount;
    return this;
  }

   /**
   * The vendor account, if the entry type is used to record transactions that involve a particular vendor, or the customer account,  if the entry type is used to record transactions that involve a particular customer.
   * @return businessAccount
  **/
  @ApiModelProperty(value = "The vendor account, if the entry type is used to record transactions that involve a particular vendor, or the customer account,  if the entry type is used to record transactions that involve a particular customer.")
  public AccountNumberDto getBusinessAccount() {
    return businessAccount;
  }

  public void setBusinessAccount(AccountNumberDto businessAccount) {
    this.businessAccount = businessAccount;
  }

  public EntryTypeDto description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A detailed description of the entry type that is used as transaction description by default.
   * @return description
  **/
  @ApiModelProperty(value = "A detailed description of the entry type that is used as transaction description by default.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public EntryTypeDto useForPaymentsReclasification(Boolean useForPaymentsReclasification) {
    this.useForPaymentsReclasification = useForPaymentsReclasification;
    return this;
  }

   /**
   * A check box that you select if this entry type is used to record unknown payments that need to be reclassified later.
   * @return useForPaymentsReclasification
  **/
  @ApiModelProperty(value = "A check box that you select if this entry type is used to record unknown payments that need to be reclassified later.")
  public Boolean isUseForPaymentsReclasification() {
    return useForPaymentsReclasification;
  }

  public void setUseForPaymentsReclasification(Boolean useForPaymentsReclasification) {
    this.useForPaymentsReclasification = useForPaymentsReclasification;
  }

  public EntryTypeDto reclasificationAccountOverride(AccountNumberDto reclasificationAccountOverride) {
    this.reclasificationAccountOverride = reclasificationAccountOverride;
    return this;
  }

   /**
   * The account that should be used instead of the reclassification account specified as the default one on the Entry Types.
   * @return reclasificationAccountOverride
  **/
  @ApiModelProperty(value = "The account that should be used instead of the reclassification account specified as the default one on the Entry Types.")
  public AccountNumberDto getReclasificationAccountOverride() {
    return reclasificationAccountOverride;
  }

  public void setReclasificationAccountOverride(AccountNumberDto reclasificationAccountOverride) {
    this.reclasificationAccountOverride = reclasificationAccountOverride;
  }

  public EntryTypeDto offsetAccountOverride(AccountNumberDto offsetAccountOverride) {
    this.offsetAccountOverride = offsetAccountOverride;
    return this;
  }

   /**
   * The account that should be used as the offset account for this entry type with this cash account instead of the default offset account specified on the Entry Types.   We recommend that for the disbursement type of transaction, you specify an expense account. For the receipt type of transaction, specify an asset account.
   * @return offsetAccountOverride
  **/
  @ApiModelProperty(value = "The account that should be used as the offset account for this entry type with this cash account instead of the default offset account specified on the Entry Types.   We recommend that for the disbursement type of transaction, you specify an expense account. For the receipt type of transaction, specify an asset account.")
  public AccountNumberDto getOffsetAccountOverride() {
    return offsetAccountOverride;
  }

  public void setOffsetAccountOverride(AccountNumberDto offsetAccountOverride) {
    this.offsetAccountOverride = offsetAccountOverride;
  }

  public EntryTypeDto offsetSubaccountOverride(SubAccountDescriptionDto offsetSubaccountOverride) {
    this.offsetSubaccountOverride = offsetSubaccountOverride;
    return this;
  }

   /**
   * The subaccount for this entry type to be used with this cash account instead of the default offset subaccount specified on the Entry Types form.
   * @return offsetSubaccountOverride
  **/
  @ApiModelProperty(value = "The subaccount for this entry type to be used with this cash account instead of the default offset subaccount specified on the Entry Types form.")
  public SubAccountDescriptionDto getOffsetSubaccountOverride() {
    return offsetSubaccountOverride;
  }

  public void setOffsetSubaccountOverride(SubAccountDescriptionDto offsetSubaccountOverride) {
    this.offsetSubaccountOverride = offsetSubaccountOverride;
  }

  public EntryTypeDto offsetAccountBranch(BranchNumberDto offsetAccountBranch) {
    this.offsetAccountBranch = offsetAccountBranch;
    return this;
  }

   /**
   * The branch to which the overriding offset account belongs.
   * @return offsetAccountBranch
  **/
  @ApiModelProperty(value = "The branch to which the overriding offset account belongs.")
  public BranchNumberDto getOffsetAccountBranch() {
    return offsetAccountBranch;
  }

  public void setOffsetAccountBranch(BranchNumberDto offsetAccountBranch) {
    this.offsetAccountBranch = offsetAccountBranch;
  }

  public EntryTypeDto vatZone(VatZoneDto vatZone) {
    this.vatZone = vatZone;
    return this;
  }

   /**
   * The tax zone to be used by default with this entry type.
   * @return vatZone
  **/
  @ApiModelProperty(value = "The tax zone to be used by default with this entry type.")
  public VatZoneDto getVatZone() {
    return vatZone;
  }

  public void setVatZone(VatZoneDto vatZone) {
    this.vatZone = vatZone;
  }

  public EntryTypeDto taxCalculationMode(TaxCalculationModeEnum taxCalculationMode) {
    this.taxCalculationMode = taxCalculationMode;
    return this;
  }

   /**
   * The tax calculation mode to be used by default with this entry type
   * @return taxCalculationMode
  **/
  @ApiModelProperty(value = "The tax calculation mode to be used by default with this entry type")
  public TaxCalculationModeEnum getTaxCalculationMode() {
    return taxCalculationMode;
  }

  public void setTaxCalculationMode(TaxCalculationModeEnum taxCalculationMode) {
    this.taxCalculationMode = taxCalculationMode;
  }

  public EntryTypeDto lastModifiedDateTime(LocalDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
    return this;
  }

   /**
   * Get lastModifiedDateTime
   * @return lastModifiedDateTime
  **/
  @ApiModelProperty(value = "")
  public LocalDateTime getLastModifiedDateTime() {
    return lastModifiedDateTime;
  }

  public void setLastModifiedDateTime(LocalDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntryTypeDto entryTypeDto = (EntryTypeDto) o;
    return Objects.equals(this.entryTypeId, entryTypeDto.entryTypeId) &&
        Objects.equals(this.disableReceipt, entryTypeDto.disableReceipt) &&
        Objects.equals(this.module, entryTypeDto.module) &&
        Objects.equals(this.defaultOffsetAccountBranch, entryTypeDto.defaultOffsetAccountBranch) &&
        Objects.equals(this.defaultOffsetAccount, entryTypeDto.defaultOffsetAccount) &&
        Objects.equals(this.defaultOffsetSubaccount, entryTypeDto.defaultOffsetSubaccount) &&
        Objects.equals(this.reclasificationAccount, entryTypeDto.reclasificationAccount) &&
        Objects.equals(this.businessAccount, entryTypeDto.businessAccount) &&
        Objects.equals(this.description, entryTypeDto.description) &&
        Objects.equals(this.useForPaymentsReclasification, entryTypeDto.useForPaymentsReclasification) &&
        Objects.equals(this.reclasificationAccountOverride, entryTypeDto.reclasificationAccountOverride) &&
        Objects.equals(this.offsetAccountOverride, entryTypeDto.offsetAccountOverride) &&
        Objects.equals(this.offsetSubaccountOverride, entryTypeDto.offsetSubaccountOverride) &&
        Objects.equals(this.offsetAccountBranch, entryTypeDto.offsetAccountBranch) &&
        Objects.equals(this.vatZone, entryTypeDto.vatZone) &&
        Objects.equals(this.taxCalculationMode, entryTypeDto.taxCalculationMode) &&
        Objects.equals(this.lastModifiedDateTime, entryTypeDto.lastModifiedDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryTypeId, disableReceipt, module, defaultOffsetAccountBranch, defaultOffsetAccount, defaultOffsetSubaccount, reclasificationAccount, businessAccount, description, useForPaymentsReclasification, reclasificationAccountOverride, offsetAccountOverride, offsetSubaccountOverride, offsetAccountBranch, vatZone, taxCalculationMode, lastModifiedDateTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntryTypeDto {\n");
    
    sb.append("    entryTypeId: ").append(toIndentedString(entryTypeId)).append("\n");
    sb.append("    disableReceipt: ").append(toIndentedString(disableReceipt)).append("\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("    defaultOffsetAccountBranch: ").append(toIndentedString(defaultOffsetAccountBranch)).append("\n");
    sb.append("    defaultOffsetAccount: ").append(toIndentedString(defaultOffsetAccount)).append("\n");
    sb.append("    defaultOffsetSubaccount: ").append(toIndentedString(defaultOffsetSubaccount)).append("\n");
    sb.append("    reclasificationAccount: ").append(toIndentedString(reclasificationAccount)).append("\n");
    sb.append("    businessAccount: ").append(toIndentedString(businessAccount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    useForPaymentsReclasification: ").append(toIndentedString(useForPaymentsReclasification)).append("\n");
    sb.append("    reclasificationAccountOverride: ").append(toIndentedString(reclasificationAccountOverride)).append("\n");
    sb.append("    offsetAccountOverride: ").append(toIndentedString(offsetAccountOverride)).append("\n");
    sb.append("    offsetSubaccountOverride: ").append(toIndentedString(offsetSubaccountOverride)).append("\n");
    sb.append("    offsetAccountBranch: ").append(toIndentedString(offsetAccountBranch)).append("\n");
    sb.append("    vatZone: ").append(toIndentedString(vatZone)).append("\n");
    sb.append("    taxCalculationMode: ").append(toIndentedString(taxCalculationMode)).append("\n");
    sb.append("    lastModifiedDateTime: ").append(toIndentedString(lastModifiedDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

