/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import no.systema.visma.v1client.model.DtoValueBoolean;
import no.systema.visma.v1client.model.DtoValueDateTime;
import no.systema.visma.v1client.model.DtoValueDecimal;
import no.systema.visma.v1client.model.DtoValueInt32;
import no.systema.visma.v1client.model.DtoValueString;
import no.systema.visma.v1client.model.SegmentUpdateDto;

/**
 * ExpenseClaimDetailUpdateDto
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T15:04:09.234+02:00")
public class ExpenseClaimDetailUpdateDto {
  /**
   * Gets or Sets operation
   */
  public enum OperationEnum {
    INSERT("Insert"),
    
    UPDATE("Update"),
    
    DELETE("Delete");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OperationEnum fromValue(String text) {
      for (OperationEnum b : OperationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("operation")
  private OperationEnum operation = null;

  @JsonProperty("claimDetailId")
  private DtoValueInt32 claimDetailId = null;

  @JsonProperty("date")
  private DtoValueDateTime date = null;

  @JsonProperty("expenseItem")
  private DtoValueString expenseItem = null;

  @JsonProperty("description")
  private DtoValueString description = null;

  @JsonProperty("quantity")
  private DtoValueDecimal quantity = null;

  @JsonProperty("uom")
  private DtoValueString uom = null;

  @JsonProperty("unitCost")
  private DtoValueDecimal unitCost = null;

  @JsonProperty("invoiceable")
  private DtoValueBoolean invoiceable = null;

  @JsonProperty("project")
  private DtoValueString project = null;

  @JsonProperty("projectTask")
  private DtoValueString projectTask = null;

  @JsonProperty("expenseAccount")
  private DtoValueString expenseAccount = null;

  @JsonProperty("expenseSubaccount")
  private List<SegmentUpdateDto> expenseSubaccount = null;

  @JsonProperty("branch")
  private DtoValueString branch = null;

  @JsonProperty("taxCategory")
  private DtoValueString taxCategory = null;

  @JsonProperty("refNbr")
  private DtoValueString refNbr = null;

  @JsonProperty("employeePart")
  private DtoValueDecimal employeePart = null;

  @JsonProperty("customer")
  private DtoValueString customer = null;

  @JsonProperty("location")
  private DtoValueString location = null;

  public ExpenseClaimDetailUpdateDto operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @ApiModelProperty(value = "")
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }

  public ExpenseClaimDetailUpdateDto claimDetailId(DtoValueInt32 claimDetailId) {
    this.claimDetailId = claimDetailId;
    return this;
  }

   /**
   * Identifies the expense claim detail line to update
   * @return claimDetailId
  **/
  @ApiModelProperty(value = "Identifies the expense claim detail line to update")
  public DtoValueInt32 getClaimDetailId() {
    return claimDetailId;
  }

  public void setClaimDetailId(DtoValueInt32 claimDetailId) {
    this.claimDetailId = claimDetailId;
  }

  public ExpenseClaimDetailUpdateDto date(DtoValueDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * The date when the expense was incurred.
   * @return date
  **/
  @ApiModelProperty(value = "The date when the expense was incurred.")
  public DtoValueDateTime getDate() {
    return date;
  }

  public void setDate(DtoValueDateTime date) {
    this.date = date;
  }

  public ExpenseClaimDetailUpdateDto expenseItem(DtoValueString expenseItem) {
    this.expenseItem = expenseItem;
    return this;
  }

   /**
   * The expense identifier, if an expense of this type is listed as an inventory nonstock item.
   * @return expenseItem
  **/
  @ApiModelProperty(value = "The expense identifier, if an expense of this type is listed as an inventory nonstock item.")
  public DtoValueString getExpenseItem() {
    return expenseItem;
  }

  public void setExpenseItem(DtoValueString expenseItem) {
    this.expenseItem = expenseItem;
  }

  public ExpenseClaimDetailUpdateDto description(DtoValueString description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the transaction.
   * @return description
  **/
  @ApiModelProperty(value = "A description of the transaction.")
  public DtoValueString getDescription() {
    return description;
  }

  public void setDescription(DtoValueString description) {
    this.description = description;
  }

  public ExpenseClaimDetailUpdateDto quantity(DtoValueDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity of this expense item.
   * @return quantity
  **/
  @ApiModelProperty(value = "The quantity of this expense item.")
  public DtoValueDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(DtoValueDecimal quantity) {
    this.quantity = quantity;
  }

  public ExpenseClaimDetailUpdateDto uom(DtoValueString uom) {
    this.uom = uom;
    return this;
  }

   /**
   * The unit of measure in which the quantity is shown.
   * @return uom
  **/
  @ApiModelProperty(value = "The unit of measure in which the quantity is shown.")
  public DtoValueString getUom() {
    return uom;
  }

  public void setUom(DtoValueString uom) {
    this.uom = uom;
  }

  public ExpenseClaimDetailUpdateDto unitCost(DtoValueDecimal unitCost) {
    this.unitCost = unitCost;
    return this;
  }

   /**
   * The cost of a unit of the item.
   * @return unitCost
  **/
  @ApiModelProperty(value = "The cost of a unit of the item.")
  public DtoValueDecimal getUnitCost() {
    return unitCost;
  }

  public void setUnitCost(DtoValueDecimal unitCost) {
    this.unitCost = unitCost;
  }

  public ExpenseClaimDetailUpdateDto invoiceable(DtoValueBoolean invoiceable) {
    this.invoiceable = invoiceable;
    return this;
  }

   /**
   * The currency of the expense receipt. However, if you enter a claim line directly, the currency value is read-only and matching the claim currency.
   * @return invoiceable
  **/
  @ApiModelProperty(value = "The currency of the expense receipt. However, if you enter a claim line directly, the currency value is read-only and matching the claim currency.")
  public DtoValueBoolean getInvoiceable() {
    return invoiceable;
  }

  public void setInvoiceable(DtoValueBoolean invoiceable) {
    this.invoiceable = invoiceable;
  }

  public ExpenseClaimDetailUpdateDto project(DtoValueString project) {
    this.project = project;
    return this;
  }

   /**
   * The project or customer contract associated with the expense claim, if the work performed was for a project or contract. Project Task The task associated with the contract or project.
   * @return project
  **/
  @ApiModelProperty(value = "The project or customer contract associated with the expense claim, if the work performed was for a project or contract. Project Task The task associated with the contract or project.")
  public DtoValueString getProject() {
    return project;
  }

  public void setProject(DtoValueString project) {
    this.project = project;
  }

  public ExpenseClaimDetailUpdateDto projectTask(DtoValueString projectTask) {
    this.projectTask = projectTask;
    return this;
  }

   /**
   * The task associated with the contract or project.
   * @return projectTask
  **/
  @ApiModelProperty(value = "The task associated with the contract or project.")
  public DtoValueString getProjectTask() {
    return projectTask;
  }

  public void setProjectTask(DtoValueString projectTask) {
    this.projectTask = projectTask;
  }

  public ExpenseClaimDetailUpdateDto expenseAccount(DtoValueString expenseAccount) {
    this.expenseAccount = expenseAccount;
    return this;
  }

   /**
   * The expense account to which the system should record the part of the expense to be paid back to the employee.
   * @return expenseAccount
  **/
  @ApiModelProperty(value = "The expense account to which the system should record the part of the expense to be paid back to the employee.")
  public DtoValueString getExpenseAccount() {
    return expenseAccount;
  }

  public void setExpenseAccount(DtoValueString expenseAccount) {
    this.expenseAccount = expenseAccount;
  }

  public ExpenseClaimDetailUpdateDto expenseSubaccount(List<SegmentUpdateDto> expenseSubaccount) {
    this.expenseSubaccount = expenseSubaccount;
    return this;
  }

  public ExpenseClaimDetailUpdateDto addExpenseSubaccountItem(SegmentUpdateDto expenseSubaccountItem) {
    if (this.expenseSubaccount == null) {
      this.expenseSubaccount = new ArrayList<>();
    }
    this.expenseSubaccount.add(expenseSubaccountItem);
    return this;
  }

   /**
   * The corresponding subaccount the system uses to record the part of the expense to be paid back to the employee.
   * @return expenseSubaccount
  **/
  @ApiModelProperty(value = "The corresponding subaccount the system uses to record the part of the expense to be paid back to the employee.")
  public List<SegmentUpdateDto> getExpenseSubaccount() {
    return expenseSubaccount;
  }

  public void setExpenseSubaccount(List<SegmentUpdateDto> expenseSubaccount) {
    this.expenseSubaccount = expenseSubaccount;
  }

  public ExpenseClaimDetailUpdateDto branch(DtoValueString branch) {
    this.branch = branch;
    return this;
  }

   /**
   * The branch that will reimburse the expenses to the employee.
   * @return branch
  **/
  @ApiModelProperty(value = "The branch that will reimburse the expenses to the employee.")
  public DtoValueString getBranch() {
    return branch;
  }

  public void setBranch(DtoValueString branch) {
    this.branch = branch;
  }

  public ExpenseClaimDetailUpdateDto taxCategory(DtoValueString taxCategory) {
    this.taxCategory = taxCategory;
    return this;
  }

   /**
   * The tax category associated with the expense item.
   * @return taxCategory
  **/
  @ApiModelProperty(value = "The tax category associated with the expense item.")
  public DtoValueString getTaxCategory() {
    return taxCategory;
  }

  public void setTaxCategory(DtoValueString taxCategory) {
    this.taxCategory = taxCategory;
  }

  public ExpenseClaimDetailUpdateDto refNbr(DtoValueString refNbr) {
    this.refNbr = refNbr;
    return this;
  }

   /**
   * The identifier of the transaction.
   * @return refNbr
  **/
  @ApiModelProperty(value = "The identifier of the transaction.")
  public DtoValueString getRefNbr() {
    return refNbr;
  }

  public void setRefNbr(DtoValueString refNbr) {
    this.refNbr = refNbr;
  }

  public ExpenseClaimDetailUpdateDto employeePart(DtoValueDecimal employeePart) {
    this.employeePart = employeePart;
    return this;
  }

   /**
   * The part of the total amount that will not be paid back to the employee. The percentage depends on the company policy.
   * @return employeePart
  **/
  @ApiModelProperty(value = "The part of the total amount that will not be paid back to the employee. The percentage depends on the company policy.")
  public DtoValueDecimal getEmployeePart() {
    return employeePart;
  }

  public void setEmployeePart(DtoValueDecimal employeePart) {
    this.employeePart = employeePart;
  }

  public ExpenseClaimDetailUpdateDto customer(DtoValueString customer) {
    this.customer = customer;
    return this;
  }

   /**
   * The identifier of the customer associated with the expense.
   * @return customer
  **/
  @ApiModelProperty(value = "The identifier of the customer associated with the expense.")
  public DtoValueString getCustomer() {
    return customer;
  }

  public void setCustomer(DtoValueString customer) {
    this.customer = customer;
  }

  public ExpenseClaimDetailUpdateDto location(DtoValueString location) {
    this.location = location;
    return this;
  }

   /**
   * The identifier of the customer location associated with the expense.
   * @return location
  **/
  @ApiModelProperty(value = "The identifier of the customer location associated with the expense.")
  public DtoValueString getLocation() {
    return location;
  }

  public void setLocation(DtoValueString location) {
    this.location = location;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpenseClaimDetailUpdateDto expenseClaimDetailUpdateDto = (ExpenseClaimDetailUpdateDto) o;
    return Objects.equals(this.operation, expenseClaimDetailUpdateDto.operation) &&
        Objects.equals(this.claimDetailId, expenseClaimDetailUpdateDto.claimDetailId) &&
        Objects.equals(this.date, expenseClaimDetailUpdateDto.date) &&
        Objects.equals(this.expenseItem, expenseClaimDetailUpdateDto.expenseItem) &&
        Objects.equals(this.description, expenseClaimDetailUpdateDto.description) &&
        Objects.equals(this.quantity, expenseClaimDetailUpdateDto.quantity) &&
        Objects.equals(this.uom, expenseClaimDetailUpdateDto.uom) &&
        Objects.equals(this.unitCost, expenseClaimDetailUpdateDto.unitCost) &&
        Objects.equals(this.invoiceable, expenseClaimDetailUpdateDto.invoiceable) &&
        Objects.equals(this.project, expenseClaimDetailUpdateDto.project) &&
        Objects.equals(this.projectTask, expenseClaimDetailUpdateDto.projectTask) &&
        Objects.equals(this.expenseAccount, expenseClaimDetailUpdateDto.expenseAccount) &&
        Objects.equals(this.expenseSubaccount, expenseClaimDetailUpdateDto.expenseSubaccount) &&
        Objects.equals(this.branch, expenseClaimDetailUpdateDto.branch) &&
        Objects.equals(this.taxCategory, expenseClaimDetailUpdateDto.taxCategory) &&
        Objects.equals(this.refNbr, expenseClaimDetailUpdateDto.refNbr) &&
        Objects.equals(this.employeePart, expenseClaimDetailUpdateDto.employeePart) &&
        Objects.equals(this.customer, expenseClaimDetailUpdateDto.customer) &&
        Objects.equals(this.location, expenseClaimDetailUpdateDto.location);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operation, claimDetailId, date, expenseItem, description, quantity, uom, unitCost, invoiceable, project, projectTask, expenseAccount, expenseSubaccount, branch, taxCategory, refNbr, employeePart, customer, location);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpenseClaimDetailUpdateDto {\n");
    
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    claimDetailId: ").append(toIndentedString(claimDetailId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    expenseItem: ").append(toIndentedString(expenseItem)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    uom: ").append(toIndentedString(uom)).append("\n");
    sb.append("    unitCost: ").append(toIndentedString(unitCost)).append("\n");
    sb.append("    invoiceable: ").append(toIndentedString(invoiceable)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    projectTask: ").append(toIndentedString(projectTask)).append("\n");
    sb.append("    expenseAccount: ").append(toIndentedString(expenseAccount)).append("\n");
    sb.append("    expenseSubaccount: ").append(toIndentedString(expenseSubaccount)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    taxCategory: ").append(toIndentedString(taxCategory)).append("\n");
    sb.append("    refNbr: ").append(toIndentedString(refNbr)).append("\n");
    sb.append("    employeePart: ").append(toIndentedString(employeePart)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

