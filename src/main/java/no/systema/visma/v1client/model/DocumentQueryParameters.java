/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * DocumentQueryParameters
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T15:04:09.234+02:00")
public class DocumentQueryParameters {
  /**
   * The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint.
   */
  public enum DocumentTypeEnum {
    INVOICE("Invoice"),
    
    DEBITNOTE("DebitNote"),
    
    CREDITNOTE("CreditNote"),
    
    PAYMENT("Payment"),
    
    VOIDPAYMENT("VoidPayment"),
    
    PREPAYMENT("Prepayment"),
    
    REFUND("Refund"),
    
    FINCHARGE("FinCharge"),
    
    SMALLBALANCEWO("SmallBalanceWo"),
    
    SMALLCREDITWO("SmallCreditWo"),
    
    CASHSALE("CashSale"),
    
    CASHRETURN("CashReturn"),
    
    UNDEFINED("Undefined"),
    
    NOUPDATE("NoUpdate");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DocumentTypeEnum fromValue(String text) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("documentType")
  private DocumentTypeEnum documentType = null;

  @JsonProperty("released")
  private Integer released = null;

  @JsonProperty("dunningLevel")
  private Integer dunningLevel = null;

  @JsonProperty("closedFinancialPeriod")
  private String closedFinancialPeriod = null;

  @JsonProperty("dunningLetterDateTime")
  private String dunningLetterDateTime = null;

  @JsonProperty("dunningLetterDateTimeCondition")
  private String dunningLetterDateTimeCondition = null;

  @JsonProperty("project")
  private String project = null;

  @JsonProperty("greaterThanValue")
  private String greaterThanValue = null;

  @JsonProperty("numberToRead")
  private Integer numberToRead = null;

  @JsonProperty("skipRecords")
  private Integer skipRecords = null;

  @JsonProperty("orderBy")
  private String orderBy = null;

  @JsonProperty("lastModifiedDateTime")
  private String lastModifiedDateTime = null;

  @JsonProperty("lastModifiedDateTimeCondition")
  private String lastModifiedDateTimeCondition = null;

  @JsonProperty("pageNumber")
  private Integer pageNumber = null;

  @JsonProperty("pageSize")
  private Integer pageSize = null;

  public DocumentQueryParameters documentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

   /**
   * The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint.
   * @return documentType
  **/
  @ApiModelProperty(value = "The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint.")
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }

  public DocumentQueryParameters released(Integer released) {
    this.released = released;
    return this;
  }

   /**
   * Get released
   * @return released
  **/
  @ApiModelProperty(value = "")
  public Integer getReleased() {
    return released;
  }

  public void setReleased(Integer released) {
    this.released = released;
  }

  public DocumentQueryParameters dunningLevel(Integer dunningLevel) {
    this.dunningLevel = dunningLevel;
    return this;
  }

   /**
   * Get dunningLevel
   * @return dunningLevel
  **/
  @ApiModelProperty(value = "")
  public Integer getDunningLevel() {
    return dunningLevel;
  }

  public void setDunningLevel(Integer dunningLevel) {
    this.dunningLevel = dunningLevel;
  }

  public DocumentQueryParameters closedFinancialPeriod(String closedFinancialPeriod) {
    this.closedFinancialPeriod = closedFinancialPeriod;
    return this;
  }

   /**
   * Get closedFinancialPeriod
   * @return closedFinancialPeriod
  **/
  @ApiModelProperty(value = "")
  public String getClosedFinancialPeriod() {
    return closedFinancialPeriod;
  }

  public void setClosedFinancialPeriod(String closedFinancialPeriod) {
    this.closedFinancialPeriod = closedFinancialPeriod;
  }

  public DocumentQueryParameters dunningLetterDateTime(String dunningLetterDateTime) {
    this.dunningLetterDateTime = dunningLetterDateTime;
    return this;
  }

   /**
   * Get dunningLetterDateTime
   * @return dunningLetterDateTime
  **/
  @ApiModelProperty(value = "")
  public String getDunningLetterDateTime() {
    return dunningLetterDateTime;
  }

  public void setDunningLetterDateTime(String dunningLetterDateTime) {
    this.dunningLetterDateTime = dunningLetterDateTime;
  }

  public DocumentQueryParameters dunningLetterDateTimeCondition(String dunningLetterDateTimeCondition) {
    this.dunningLetterDateTimeCondition = dunningLetterDateTimeCondition;
    return this;
  }

   /**
   * Get dunningLetterDateTimeCondition
   * @return dunningLetterDateTimeCondition
  **/
  @ApiModelProperty(value = "")
  public String getDunningLetterDateTimeCondition() {
    return dunningLetterDateTimeCondition;
  }

  public void setDunningLetterDateTimeCondition(String dunningLetterDateTimeCondition) {
    this.dunningLetterDateTimeCondition = dunningLetterDateTimeCondition;
  }

  public DocumentQueryParameters project(String project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @ApiModelProperty(value = "")
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }

  public DocumentQueryParameters greaterThanValue(String greaterThanValue) {
    this.greaterThanValue = greaterThanValue;
    return this;
  }

   /**
   * Get greaterThanValue
   * @return greaterThanValue
  **/
  @ApiModelProperty(value = "")
  public String getGreaterThanValue() {
    return greaterThanValue;
  }

  public void setGreaterThanValue(String greaterThanValue) {
    this.greaterThanValue = greaterThanValue;
  }

  public DocumentQueryParameters numberToRead(Integer numberToRead) {
    this.numberToRead = numberToRead;
    return this;
  }

   /**
   * Get numberToRead
   * @return numberToRead
  **/
  @ApiModelProperty(value = "")
  public Integer getNumberToRead() {
    return numberToRead;
  }

  public void setNumberToRead(Integer numberToRead) {
    this.numberToRead = numberToRead;
  }

  public DocumentQueryParameters skipRecords(Integer skipRecords) {
    this.skipRecords = skipRecords;
    return this;
  }

   /**
   * Get skipRecords
   * @return skipRecords
  **/
  @ApiModelProperty(value = "")
  public Integer getSkipRecords() {
    return skipRecords;
  }

  public void setSkipRecords(Integer skipRecords) {
    this.skipRecords = skipRecords;
  }

  public DocumentQueryParameters orderBy(String orderBy) {
    this.orderBy = orderBy;
    return this;
  }

   /**
   * Get orderBy
   * @return orderBy
  **/
  @ApiModelProperty(value = "")
  public String getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(String orderBy) {
    this.orderBy = orderBy;
  }

  public DocumentQueryParameters lastModifiedDateTime(String lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
    return this;
  }

   /**
   * Get lastModifiedDateTime
   * @return lastModifiedDateTime
  **/
  @ApiModelProperty(value = "")
  public String getLastModifiedDateTime() {
    return lastModifiedDateTime;
  }

  public void setLastModifiedDateTime(String lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
  }

  public DocumentQueryParameters lastModifiedDateTimeCondition(String lastModifiedDateTimeCondition) {
    this.lastModifiedDateTimeCondition = lastModifiedDateTimeCondition;
    return this;
  }

   /**
   * Get lastModifiedDateTimeCondition
   * @return lastModifiedDateTimeCondition
  **/
  @ApiModelProperty(value = "")
  public String getLastModifiedDateTimeCondition() {
    return lastModifiedDateTimeCondition;
  }

  public void setLastModifiedDateTimeCondition(String lastModifiedDateTimeCondition) {
    this.lastModifiedDateTimeCondition = lastModifiedDateTimeCondition;
  }

  public DocumentQueryParameters pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @ApiModelProperty(value = "")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public DocumentQueryParameters pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @ApiModelProperty(value = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentQueryParameters documentQueryParameters = (DocumentQueryParameters) o;
    return Objects.equals(this.documentType, documentQueryParameters.documentType) &&
        Objects.equals(this.released, documentQueryParameters.released) &&
        Objects.equals(this.dunningLevel, documentQueryParameters.dunningLevel) &&
        Objects.equals(this.closedFinancialPeriod, documentQueryParameters.closedFinancialPeriod) &&
        Objects.equals(this.dunningLetterDateTime, documentQueryParameters.dunningLetterDateTime) &&
        Objects.equals(this.dunningLetterDateTimeCondition, documentQueryParameters.dunningLetterDateTimeCondition) &&
        Objects.equals(this.project, documentQueryParameters.project) &&
        Objects.equals(this.greaterThanValue, documentQueryParameters.greaterThanValue) &&
        Objects.equals(this.numberToRead, documentQueryParameters.numberToRead) &&
        Objects.equals(this.skipRecords, documentQueryParameters.skipRecords) &&
        Objects.equals(this.orderBy, documentQueryParameters.orderBy) &&
        Objects.equals(this.lastModifiedDateTime, documentQueryParameters.lastModifiedDateTime) &&
        Objects.equals(this.lastModifiedDateTimeCondition, documentQueryParameters.lastModifiedDateTimeCondition) &&
        Objects.equals(this.pageNumber, documentQueryParameters.pageNumber) &&
        Objects.equals(this.pageSize, documentQueryParameters.pageSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentType, released, dunningLevel, closedFinancialPeriod, dunningLetterDateTime, dunningLetterDateTimeCondition, project, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, pageNumber, pageSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentQueryParameters {\n");
    
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    released: ").append(toIndentedString(released)).append("\n");
    sb.append("    dunningLevel: ").append(toIndentedString(dunningLevel)).append("\n");
    sb.append("    closedFinancialPeriod: ").append(toIndentedString(closedFinancialPeriod)).append("\n");
    sb.append("    dunningLetterDateTime: ").append(toIndentedString(dunningLetterDateTime)).append("\n");
    sb.append("    dunningLetterDateTimeCondition: ").append(toIndentedString(dunningLetterDateTimeCondition)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    greaterThanValue: ").append(toIndentedString(greaterThanValue)).append("\n");
    sb.append("    numberToRead: ").append(toIndentedString(numberToRead)).append("\n");
    sb.append("    skipRecords: ").append(toIndentedString(skipRecords)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    lastModifiedDateTime: ").append(toIndentedString(lastModifiedDateTime)).append("\n");
    sb.append("    lastModifiedDateTimeCondition: ").append(toIndentedString(lastModifiedDateTimeCondition)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

