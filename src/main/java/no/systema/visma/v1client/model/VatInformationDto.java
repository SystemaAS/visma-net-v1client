/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import no.systema.visma.v1client.model.InventoryNumberDescriptionDto;
import no.systema.visma.v1client.model.SupplierNumberDto;
import no.systema.visma.v1client.model.VatCategoryDto;
import no.systema.visma.v1client.model.VatGlAccountsDto;
import no.systema.visma.v1client.model.VatInformationScheduleDto;
import no.systema.visma.v1client.model.VatZoneDto;

/**
 * VatInformationDto
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T15:04:09.234+02:00")
public class VatInformationDto {
  @JsonProperty("vatCategoryId")
  private String vatCategoryId = null;

  @JsonProperty("vatId")
  private String vatId = null;

  @JsonProperty("description")
  private String description = null;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    SALES("Sales"),
    
    USE("Use"),
    
    VAT("Vat"),
    
    WITHHOLDING("Withholding"),
    
    EXEMPTVAT("ExemptVat"),
    
    STATISTICALVAT("StatisticalVat"),
    
    DIRECTVAT("DirectVat"),
    
    PENDINGVAT("PendingVat"),
    
    REVERSEVAT("ReverseVat");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("deductibleVat")
  private Boolean deductibleVat = null;

  @JsonProperty("reverseVat")
  private Boolean reverseVat = null;

  @JsonProperty("statisticalVat")
  private Boolean statisticalVat = null;

  @JsonProperty("pendingVat")
  private Boolean pendingVat = null;

  @JsonProperty("includeinVatExemptTotal")
  private Boolean includeinVatExemptTotal = null;

  @JsonProperty("includeinVatTotal")
  private Boolean includeinVatTotal = null;

  @JsonProperty("enterFromVatInvoice")
  private Boolean enterFromVatInvoice = null;

  /**
   * Gets or Sets calculateOn
   */
  public enum CalculateOnEnum {
    EXTRACTFROMITEMAMOUNT("ExtractFromItemAmount"),
    
    ITEMAMOUNT("ItemAmount"),
    
    ITEMTAXAMOUNT("ItemTaxAmount"),
    
    DOCUMENTAMOUNT("DocumentAmount"),
    
    DOCUMENTAXAMOUNT("DocumenTaxAmount");

    private String value;

    CalculateOnEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CalculateOnEnum fromValue(String text) {
      for (CalculateOnEnum b : CalculateOnEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("calculateOn")
  private CalculateOnEnum calculateOn = null;

  /**
   * Gets or Sets cashDiscount
   */
  public enum CashDiscountEnum {
    TOTAXABLEAMOUNT("ToTaxableAmount"),
    
    TOPROMTPAYMENT("ToPromtPayment"),
    
    TOTAXAMOUNT("ToTaxAmount"),
    
    ADJUSTTAX("AdjustTax"),
    
    NOADJUST("NoAdjust");

    private String value;

    CashDiscountEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CashDiscountEnum fromValue(String text) {
      for (CashDiscountEnum b : CashDiscountEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("cashDiscount")
  private CashDiscountEnum cashDiscount = null;

  @JsonProperty("vatAgencyId")
  private SupplierNumberDto vatAgencyId = null;

  @JsonProperty("notValidAfter")
  private LocalDateTime notValidAfter = null;

  /**
   * Gets or Sets euReportCode
   */
  public enum EuReportCodeEnum {
    SALESOFGOODS("SalesOfGoods"),
    
    TRIANGULATION("Triangulation"),
    
    SALESOFSERVICE("SalesOfService");

    private String value;

    EuReportCodeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EuReportCodeEnum fromValue(String text) {
      for (EuReportCodeEnum b : EuReportCodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("euReportCode")
  private EuReportCodeEnum euReportCode = null;

  /**
   * Gets or Sets documentText
   */
  public enum DocumentTextEnum {
    CONSTRUCTION("Construction"),
    
    SUPPLYVAT0("SupplyVat0"),
    
    DENOTEEXPORTSALES("DenoteExportSales"),
    
    EUSALEEXEMPTFROMTAX("EUSaleExemptFromTax"),
    
    TRIANGULATION("Triangulation"),
    
    TRANSPORTOUTSIDEEU("TransportOutsideEU"),
    
    SPECIALTAXFREETRANSFER("SpecialTaxFreeTransfer"),
    
    MEDICALSERVICESALES("MedicalServiceSales"),
    
    BUYERHASVATLIABILITY("BuyerHasVATLiability"),
    
    SALESOFGOLD("SalesOfGold"),
    
    GOODSSERVICESWITHPARTIALDEDUCTION("GoodsServicesWithPartialDeduction"),
    
    MARGINESCHEME("MargineScheme"),
    
    TRAVELAGENTSMARGINESCHEME("TravelAgentsMargineScheme"),
    
    PARTIALLYNONDEDUCTIBLEINUSE("PartiallyNonDeductibleInUse"),
    
    VAT0SALESOUTSIDECOMMUNITY("Vat0SalesOutsideCommunity"),
    
    SELFBILLING("SelfBilling"),
    
    MARGINESCHEMEUSEDITEMS("MargineSchemeUsedItems"),
    
    MARGINESCHEMEWORKSOFART("MargineSchemeWorksOfArt"),
    
    MARGINESCHEMECOLLECTORSITEMS("MargineSchemeCollectorsItems");

    private String value;

    DocumentTextEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DocumentTextEnum fromValue(String text) {
      for (DocumentTextEnum b : DocumentTextEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("documentText")
  private DocumentTextEnum documentText = null;

  @JsonProperty("defaultNonStockItem")
  private InventoryNumberDescriptionDto defaultNonStockItem = null;

  /**
   * Gets or Sets vismaXmlVatType
   */
  public enum VismaXmlVatTypeEnum {
    VATTYPEHIGH("VatTypeHigh"),
    
    VATTYPEMEDIUM("VatTypeMedium"),
    
    VATTYPELOW("VatTypeLow"),
    
    VATTYPEZERO("VatTypeZero"),
    
    VATTYPEEXEMPT("VatTypeExempt");

    private String value;

    VismaXmlVatTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VismaXmlVatTypeEnum fromValue(String text) {
      for (VismaXmlVatTypeEnum b : VismaXmlVatTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("vismaXmlVatType")
  private VismaXmlVatTypeEnum vismaXmlVatType = null;

  @JsonProperty("lastModifiedDateTime")
  private LocalDateTime lastModifiedDateTime = null;

  @JsonProperty("glAccounts")
  private VatGlAccountsDto glAccounts = null;

  @JsonProperty("schedules")
  private List<VatInformationScheduleDto> schedules = null;

  @JsonProperty("categories")
  private List<VatCategoryDto> categories = null;

  @JsonProperty("zones")
  private List<VatZoneDto> zones = null;

  public VatInformationDto vatCategoryId(String vatCategoryId) {
    this.vatCategoryId = vatCategoryId;
    return this;
  }

   /**
   * VatCategoryId is deprecated, please use Vat Id instead
   * @return vatCategoryId
  **/
  @ApiModelProperty(value = "VatCategoryId is deprecated, please use Vat Id instead")
  public String getVatCategoryId() {
    return vatCategoryId;
  }

  public void setVatCategoryId(String vatCategoryId) {
    this.vatCategoryId = vatCategoryId;
  }

  public VatInformationDto vatId(String vatId) {
    this.vatId = vatId;
    return this;
  }

   /**
   * Get vatId
   * @return vatId
  **/
  @ApiModelProperty(value = "")
  public String getVatId() {
    return vatId;
  }

  public void setVatId(String vatId) {
    this.vatId = vatId;
  }

  public VatInformationDto description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public VatInformationDto type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public VatInformationDto deductibleVat(Boolean deductibleVat) {
    this.deductibleVat = deductibleVat;
    return this;
  }

   /**
   * Get deductibleVat
   * @return deductibleVat
  **/
  @ApiModelProperty(value = "")
  public Boolean isDeductibleVat() {
    return deductibleVat;
  }

  public void setDeductibleVat(Boolean deductibleVat) {
    this.deductibleVat = deductibleVat;
  }

  public VatInformationDto reverseVat(Boolean reverseVat) {
    this.reverseVat = reverseVat;
    return this;
  }

   /**
   * Get reverseVat
   * @return reverseVat
  **/
  @ApiModelProperty(value = "")
  public Boolean isReverseVat() {
    return reverseVat;
  }

  public void setReverseVat(Boolean reverseVat) {
    this.reverseVat = reverseVat;
  }

  public VatInformationDto statisticalVat(Boolean statisticalVat) {
    this.statisticalVat = statisticalVat;
    return this;
  }

   /**
   * Get statisticalVat
   * @return statisticalVat
  **/
  @ApiModelProperty(value = "")
  public Boolean isStatisticalVat() {
    return statisticalVat;
  }

  public void setStatisticalVat(Boolean statisticalVat) {
    this.statisticalVat = statisticalVat;
  }

  public VatInformationDto pendingVat(Boolean pendingVat) {
    this.pendingVat = pendingVat;
    return this;
  }

   /**
   * Get pendingVat
   * @return pendingVat
  **/
  @ApiModelProperty(value = "")
  public Boolean isPendingVat() {
    return pendingVat;
  }

  public void setPendingVat(Boolean pendingVat) {
    this.pendingVat = pendingVat;
  }

  public VatInformationDto includeinVatExemptTotal(Boolean includeinVatExemptTotal) {
    this.includeinVatExemptTotal = includeinVatExemptTotal;
    return this;
  }

   /**
   * Get includeinVatExemptTotal
   * @return includeinVatExemptTotal
  **/
  @ApiModelProperty(value = "")
  public Boolean isIncludeinVatExemptTotal() {
    return includeinVatExemptTotal;
  }

  public void setIncludeinVatExemptTotal(Boolean includeinVatExemptTotal) {
    this.includeinVatExemptTotal = includeinVatExemptTotal;
  }

  public VatInformationDto includeinVatTotal(Boolean includeinVatTotal) {
    this.includeinVatTotal = includeinVatTotal;
    return this;
  }

   /**
   * Get includeinVatTotal
   * @return includeinVatTotal
  **/
  @ApiModelProperty(value = "")
  public Boolean isIncludeinVatTotal() {
    return includeinVatTotal;
  }

  public void setIncludeinVatTotal(Boolean includeinVatTotal) {
    this.includeinVatTotal = includeinVatTotal;
  }

  public VatInformationDto enterFromVatInvoice(Boolean enterFromVatInvoice) {
    this.enterFromVatInvoice = enterFromVatInvoice;
    return this;
  }

   /**
   * Get enterFromVatInvoice
   * @return enterFromVatInvoice
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnterFromVatInvoice() {
    return enterFromVatInvoice;
  }

  public void setEnterFromVatInvoice(Boolean enterFromVatInvoice) {
    this.enterFromVatInvoice = enterFromVatInvoice;
  }

  public VatInformationDto calculateOn(CalculateOnEnum calculateOn) {
    this.calculateOn = calculateOn;
    return this;
  }

   /**
   * Get calculateOn
   * @return calculateOn
  **/
  @ApiModelProperty(value = "")
  public CalculateOnEnum getCalculateOn() {
    return calculateOn;
  }

  public void setCalculateOn(CalculateOnEnum calculateOn) {
    this.calculateOn = calculateOn;
  }

  public VatInformationDto cashDiscount(CashDiscountEnum cashDiscount) {
    this.cashDiscount = cashDiscount;
    return this;
  }

   /**
   * Get cashDiscount
   * @return cashDiscount
  **/
  @ApiModelProperty(value = "")
  public CashDiscountEnum getCashDiscount() {
    return cashDiscount;
  }

  public void setCashDiscount(CashDiscountEnum cashDiscount) {
    this.cashDiscount = cashDiscount;
  }

  public VatInformationDto vatAgencyId(SupplierNumberDto vatAgencyId) {
    this.vatAgencyId = vatAgencyId;
    return this;
  }

   /**
   * Get vatAgencyId
   * @return vatAgencyId
  **/
  @ApiModelProperty(value = "")
  public SupplierNumberDto getVatAgencyId() {
    return vatAgencyId;
  }

  public void setVatAgencyId(SupplierNumberDto vatAgencyId) {
    this.vatAgencyId = vatAgencyId;
  }

  public VatInformationDto notValidAfter(LocalDateTime notValidAfter) {
    this.notValidAfter = notValidAfter;
    return this;
  }

   /**
   * Get notValidAfter
   * @return notValidAfter
  **/
  @ApiModelProperty(value = "")
  public LocalDateTime getNotValidAfter() {
    return notValidAfter;
  }

  public void setNotValidAfter(LocalDateTime notValidAfter) {
    this.notValidAfter = notValidAfter;
  }

  public VatInformationDto euReportCode(EuReportCodeEnum euReportCode) {
    this.euReportCode = euReportCode;
    return this;
  }

   /**
   * Get euReportCode
   * @return euReportCode
  **/
  @ApiModelProperty(value = "")
  public EuReportCodeEnum getEuReportCode() {
    return euReportCode;
  }

  public void setEuReportCode(EuReportCodeEnum euReportCode) {
    this.euReportCode = euReportCode;
  }

  public VatInformationDto documentText(DocumentTextEnum documentText) {
    this.documentText = documentText;
    return this;
  }

   /**
   * Get documentText
   * @return documentText
  **/
  @ApiModelProperty(value = "")
  public DocumentTextEnum getDocumentText() {
    return documentText;
  }

  public void setDocumentText(DocumentTextEnum documentText) {
    this.documentText = documentText;
  }

  public VatInformationDto defaultNonStockItem(InventoryNumberDescriptionDto defaultNonStockItem) {
    this.defaultNonStockItem = defaultNonStockItem;
    return this;
  }

   /**
   * Get defaultNonStockItem
   * @return defaultNonStockItem
  **/
  @ApiModelProperty(value = "")
  public InventoryNumberDescriptionDto getDefaultNonStockItem() {
    return defaultNonStockItem;
  }

  public void setDefaultNonStockItem(InventoryNumberDescriptionDto defaultNonStockItem) {
    this.defaultNonStockItem = defaultNonStockItem;
  }

  public VatInformationDto vismaXmlVatType(VismaXmlVatTypeEnum vismaXmlVatType) {
    this.vismaXmlVatType = vismaXmlVatType;
    return this;
  }

   /**
   * Get vismaXmlVatType
   * @return vismaXmlVatType
  **/
  @ApiModelProperty(value = "")
  public VismaXmlVatTypeEnum getVismaXmlVatType() {
    return vismaXmlVatType;
  }

  public void setVismaXmlVatType(VismaXmlVatTypeEnum vismaXmlVatType) {
    this.vismaXmlVatType = vismaXmlVatType;
  }

  public VatInformationDto lastModifiedDateTime(LocalDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
    return this;
  }

   /**
   * Get lastModifiedDateTime
   * @return lastModifiedDateTime
  **/
  @ApiModelProperty(value = "")
  public LocalDateTime getLastModifiedDateTime() {
    return lastModifiedDateTime;
  }

  public void setLastModifiedDateTime(LocalDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
  }

  public VatInformationDto glAccounts(VatGlAccountsDto glAccounts) {
    this.glAccounts = glAccounts;
    return this;
  }

   /**
   * Get glAccounts
   * @return glAccounts
  **/
  @ApiModelProperty(value = "")
  public VatGlAccountsDto getGlAccounts() {
    return glAccounts;
  }

  public void setGlAccounts(VatGlAccountsDto glAccounts) {
    this.glAccounts = glAccounts;
  }

  public VatInformationDto schedules(List<VatInformationScheduleDto> schedules) {
    this.schedules = schedules;
    return this;
  }

  public VatInformationDto addSchedulesItem(VatInformationScheduleDto schedulesItem) {
    if (this.schedules == null) {
      this.schedules = new ArrayList<>();
    }
    this.schedules.add(schedulesItem);
    return this;
  }

   /**
   * Get schedules
   * @return schedules
  **/
  @ApiModelProperty(value = "")
  public List<VatInformationScheduleDto> getSchedules() {
    return schedules;
  }

  public void setSchedules(List<VatInformationScheduleDto> schedules) {
    this.schedules = schedules;
  }

  public VatInformationDto categories(List<VatCategoryDto> categories) {
    this.categories = categories;
    return this;
  }

  public VatInformationDto addCategoriesItem(VatCategoryDto categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @ApiModelProperty(value = "")
  public List<VatCategoryDto> getCategories() {
    return categories;
  }

  public void setCategories(List<VatCategoryDto> categories) {
    this.categories = categories;
  }

  public VatInformationDto zones(List<VatZoneDto> zones) {
    this.zones = zones;
    return this;
  }

  public VatInformationDto addZonesItem(VatZoneDto zonesItem) {
    if (this.zones == null) {
      this.zones = new ArrayList<>();
    }
    this.zones.add(zonesItem);
    return this;
  }

   /**
   * Get zones
   * @return zones
  **/
  @ApiModelProperty(value = "")
  public List<VatZoneDto> getZones() {
    return zones;
  }

  public void setZones(List<VatZoneDto> zones) {
    this.zones = zones;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VatInformationDto vatInformationDto = (VatInformationDto) o;
    return Objects.equals(this.vatCategoryId, vatInformationDto.vatCategoryId) &&
        Objects.equals(this.vatId, vatInformationDto.vatId) &&
        Objects.equals(this.description, vatInformationDto.description) &&
        Objects.equals(this.type, vatInformationDto.type) &&
        Objects.equals(this.deductibleVat, vatInformationDto.deductibleVat) &&
        Objects.equals(this.reverseVat, vatInformationDto.reverseVat) &&
        Objects.equals(this.statisticalVat, vatInformationDto.statisticalVat) &&
        Objects.equals(this.pendingVat, vatInformationDto.pendingVat) &&
        Objects.equals(this.includeinVatExemptTotal, vatInformationDto.includeinVatExemptTotal) &&
        Objects.equals(this.includeinVatTotal, vatInformationDto.includeinVatTotal) &&
        Objects.equals(this.enterFromVatInvoice, vatInformationDto.enterFromVatInvoice) &&
        Objects.equals(this.calculateOn, vatInformationDto.calculateOn) &&
        Objects.equals(this.cashDiscount, vatInformationDto.cashDiscount) &&
        Objects.equals(this.vatAgencyId, vatInformationDto.vatAgencyId) &&
        Objects.equals(this.notValidAfter, vatInformationDto.notValidAfter) &&
        Objects.equals(this.euReportCode, vatInformationDto.euReportCode) &&
        Objects.equals(this.documentText, vatInformationDto.documentText) &&
        Objects.equals(this.defaultNonStockItem, vatInformationDto.defaultNonStockItem) &&
        Objects.equals(this.vismaXmlVatType, vatInformationDto.vismaXmlVatType) &&
        Objects.equals(this.lastModifiedDateTime, vatInformationDto.lastModifiedDateTime) &&
        Objects.equals(this.glAccounts, vatInformationDto.glAccounts) &&
        Objects.equals(this.schedules, vatInformationDto.schedules) &&
        Objects.equals(this.categories, vatInformationDto.categories) &&
        Objects.equals(this.zones, vatInformationDto.zones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vatCategoryId, vatId, description, type, deductibleVat, reverseVat, statisticalVat, pendingVat, includeinVatExemptTotal, includeinVatTotal, enterFromVatInvoice, calculateOn, cashDiscount, vatAgencyId, notValidAfter, euReportCode, documentText, defaultNonStockItem, vismaXmlVatType, lastModifiedDateTime, glAccounts, schedules, categories, zones);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VatInformationDto {\n");
    
    sb.append("    vatCategoryId: ").append(toIndentedString(vatCategoryId)).append("\n");
    sb.append("    vatId: ").append(toIndentedString(vatId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    deductibleVat: ").append(toIndentedString(deductibleVat)).append("\n");
    sb.append("    reverseVat: ").append(toIndentedString(reverseVat)).append("\n");
    sb.append("    statisticalVat: ").append(toIndentedString(statisticalVat)).append("\n");
    sb.append("    pendingVat: ").append(toIndentedString(pendingVat)).append("\n");
    sb.append("    includeinVatExemptTotal: ").append(toIndentedString(includeinVatExemptTotal)).append("\n");
    sb.append("    includeinVatTotal: ").append(toIndentedString(includeinVatTotal)).append("\n");
    sb.append("    enterFromVatInvoice: ").append(toIndentedString(enterFromVatInvoice)).append("\n");
    sb.append("    calculateOn: ").append(toIndentedString(calculateOn)).append("\n");
    sb.append("    cashDiscount: ").append(toIndentedString(cashDiscount)).append("\n");
    sb.append("    vatAgencyId: ").append(toIndentedString(vatAgencyId)).append("\n");
    sb.append("    notValidAfter: ").append(toIndentedString(notValidAfter)).append("\n");
    sb.append("    euReportCode: ").append(toIndentedString(euReportCode)).append("\n");
    sb.append("    documentText: ").append(toIndentedString(documentText)).append("\n");
    sb.append("    defaultNonStockItem: ").append(toIndentedString(defaultNonStockItem)).append("\n");
    sb.append("    vismaXmlVatType: ").append(toIndentedString(vismaXmlVatType)).append("\n");
    sb.append("    lastModifiedDateTime: ").append(toIndentedString(lastModifiedDateTime)).append("\n");
    sb.append("    glAccounts: ").append(toIndentedString(glAccounts)).append("\n");
    sb.append("    schedules: ").append(toIndentedString(schedules)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    zones: ").append(toIndentedString(zones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

