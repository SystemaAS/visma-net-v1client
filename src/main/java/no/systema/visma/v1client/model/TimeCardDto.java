/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import no.systema.visma.v1client.model.EmployeeNumberNameDto;
import no.systema.visma.v1client.model.TimeCardSummaryDto;
import no.systema.visma.v1client.model.WeekNumberDescriptionDto;

/**
 * TimeCardDto
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T15:04:09.234+02:00")
public class TimeCardDto {
  @JsonProperty("refNbr")
  private String refNbr = null;

  /**
   * The status of the time card
   */
  public enum StatusEnum {
    HOLD("Hold"),
    
    OPEN("Open"),
    
    APPROVED("Approved"),
    
    REJECTED("Rejected"),
    
    RELEASED("Released");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("status")
  private StatusEnum status = null;

  /**
   * The approval status of the time card
   */
  public enum ApprovalStatusEnum {
    NEW("New"),
    
    CANCELED("Canceled"),
    
    SENTTOAPPROVAL("SentToApproval"),
    
    RECEIVEDBYAPPROVAL("ReceivedByApproval"),
    
    INPROGRESSAPPROVAL("InProgressApproval"),
    
    REJECTEDINAPPROVAL("RejectedInApproval"),
    
    APPROVEDINAPPROVAL("ApprovedInApproval"),
    
    ACTIVEWORKFLOWAPPROVAL("ActiveWorkflowApproval");

    private String value;

    ApprovalStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ApprovalStatusEnum fromValue(String text) {
      for (ApprovalStatusEnum b : ApprovalStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("approvalStatus")
  private ApprovalStatusEnum approvalStatus = null;

  @JsonProperty("week")
  private WeekNumberDescriptionDto week = null;

  @JsonProperty("employee")
  private EmployeeNumberNameDto employee = null;

  /**
   * The type of the time card. The following options are available:• Normal: Regular time card• Correction: Corrective time card, which is a time card that updates a released time card
   */
  public enum TypeEnum {
    NORMAL("Normal"),
    
    CORRECTION("Correction"),
    
    NORMALCORRECTED("NormalCorrected");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("origRefNbr")
  private String origRefNbr = null;

  @JsonProperty("timeSpent")
  private Integer timeSpent = null;

  @JsonProperty("invoiceable")
  private Integer invoiceable = null;

  @JsonProperty("overtimeSpent")
  private Integer overtimeSpent = null;

  @JsonProperty("invoiceableOvertime")
  private Integer invoiceableOvertime = null;

  @JsonProperty("totalTimeSpent")
  private Integer totalTimeSpent = null;

  @JsonProperty("invoiceableTotalTime")
  private Integer invoiceableTotalTime = null;

  @JsonProperty("lastModifiedDateTime")
  private LocalDateTime lastModifiedDateTime = null;

  @JsonProperty("summary")
  private List<TimeCardSummaryDto> summary = null;

  @JsonProperty("approvalStatusText")
  private String approvalStatusText = null;

  @JsonProperty("extras")
  private Map<String, Object> extras = null;

  @JsonProperty("errorInfo")
  private String errorInfo = null;

  public TimeCardDto refNbr(String refNbr) {
    this.refNbr = refNbr;
    return this;
  }

   /**
   * The unique reference number of the time card, which Acumatica ERP automatically assigns according to the numbering sequence specified as the Time Card Numbering Sequence on the Time and Expenses Preferences (EP.10.10.00) form.
   * @return refNbr
  **/
  @ApiModelProperty(value = "The unique reference number of the time card, which Acumatica ERP automatically assigns according to the numbering sequence specified as the Time Card Numbering Sequence on the Time and Expenses Preferences (EP.10.10.00) form.")
  public String getRefNbr() {
    return refNbr;
  }

  public void setRefNbr(String refNbr) {
    this.refNbr = refNbr;
  }

  public TimeCardDto status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the time card
   * @return status
  **/
  @ApiModelProperty(value = "The status of the time card")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public TimeCardDto approvalStatus(ApprovalStatusEnum approvalStatus) {
    this.approvalStatus = approvalStatus;
    return this;
  }

   /**
   * The approval status of the time card
   * @return approvalStatus
  **/
  @ApiModelProperty(value = "The approval status of the time card")
  public ApprovalStatusEnum getApprovalStatus() {
    return approvalStatus;
  }

  public void setApprovalStatus(ApprovalStatusEnum approvalStatus) {
    this.approvalStatus = approvalStatus;
  }

  public TimeCardDto week(WeekNumberDescriptionDto week) {
    this.week = week;
    return this;
  }

   /**
   * The week for which the time card has been created.
   * @return week
  **/
  @ApiModelProperty(value = "The week for which the time card has been created.")
  public WeekNumberDescriptionDto getWeek() {
    return week;
  }

  public void setWeek(WeekNumberDescriptionDto week) {
    this.week = week;
  }

  public TimeCardDto employee(EmployeeNumberNameDto employee) {
    this.employee = employee;
    return this;
  }

   /**
   * The name of the employee whose time card is currently open.
   * @return employee
  **/
  @ApiModelProperty(value = "The name of the employee whose time card is currently open.")
  public EmployeeNumberNameDto getEmployee() {
    return employee;
  }

  public void setEmployee(EmployeeNumberNameDto employee) {
    this.employee = employee;
  }

  public TimeCardDto type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the time card. The following options are available:• Normal: Regular time card• Correction: Corrective time card, which is a time card that updates a released time card
   * @return type
  **/
  @ApiModelProperty(value = "The type of the time card. The following options are available:• Normal: Regular time card• Correction: Corrective time card, which is a time card that updates a released time card")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public TimeCardDto origRefNbr(String origRefNbr) {
    this.origRefNbr = origRefNbr;
    return this;
  }

   /**
   * The reference number of the time card being corrected. This box is filled in only when Correction is specified in the Type box
   * @return origRefNbr
  **/
  @ApiModelProperty(value = "The reference number of the time card being corrected. This box is filled in only when Correction is specified in the Type box")
  public String getOrigRefNbr() {
    return origRefNbr;
  }

  public void setOrigRefNbr(String origRefNbr) {
    this.origRefNbr = origRefNbr;
  }

  public TimeCardDto timeSpent(Integer timeSpent) {
    this.timeSpent = timeSpent;
    return this;
  }

   /**
   * The work hours spent by the employee during the week on activities with the Regular Hours earning type.
   * @return timeSpent
  **/
  @ApiModelProperty(value = "The work hours spent by the employee during the week on activities with the Regular Hours earning type.")
  public Integer getTimeSpent() {
    return timeSpent;
  }

  public void setTimeSpent(Integer timeSpent) {
    this.timeSpent = timeSpent;
  }

  public TimeCardDto invoiceable(Integer invoiceable) {
    this.invoiceable = invoiceable;
    return this;
  }

   /**
   * The invoiceable work hours spent by the employee during the week
   * @return invoiceable
  **/
  @ApiModelProperty(value = "The invoiceable work hours spent by the employee during the week")
  public Integer getInvoiceable() {
    return invoiceable;
  }

  public void setInvoiceable(Integer invoiceable) {
    this.invoiceable = invoiceable;
  }

  public TimeCardDto overtimeSpent(Integer overtimeSpent) {
    this.overtimeSpent = overtimeSpent;
    return this;
  }

   /**
   * The work hours spent by the employee during the week on activities with the Overtime earning type.
   * @return overtimeSpent
  **/
  @ApiModelProperty(value = "The work hours spent by the employee during the week on activities with the Overtime earning type.")
  public Integer getOvertimeSpent() {
    return overtimeSpent;
  }

  public void setOvertimeSpent(Integer overtimeSpent) {
    this.overtimeSpent = overtimeSpent;
  }

  public TimeCardDto invoiceableOvertime(Integer invoiceableOvertime) {
    this.invoiceableOvertime = invoiceableOvertime;
    return this;
  }

   /**
   * The invoiceable overtime spent by the employee during the week
   * @return invoiceableOvertime
  **/
  @ApiModelProperty(value = "The invoiceable overtime spent by the employee during the week")
  public Integer getInvoiceableOvertime() {
    return invoiceableOvertime;
  }

  public void setInvoiceableOvertime(Integer invoiceableOvertime) {
    this.invoiceableOvertime = invoiceableOvertime;
  }

  public TimeCardDto totalTimeSpent(Integer totalTimeSpent) {
    this.totalTimeSpent = totalTimeSpent;
    return this;
  }

   /**
   * The total working time (regular and overtime) for the week
   * @return totalTimeSpent
  **/
  @ApiModelProperty(value = "The total working time (regular and overtime) for the week")
  public Integer getTotalTimeSpent() {
    return totalTimeSpent;
  }

  public void setTotalTimeSpent(Integer totalTimeSpent) {
    this.totalTimeSpent = totalTimeSpent;
  }

  public TimeCardDto invoiceableTotalTime(Integer invoiceableTotalTime) {
    this.invoiceableTotalTime = invoiceableTotalTime;
    return this;
  }

   /**
   * The total invoiceable working time (regular and overtime) for the week
   * @return invoiceableTotalTime
  **/
  @ApiModelProperty(value = "The total invoiceable working time (regular and overtime) for the week")
  public Integer getInvoiceableTotalTime() {
    return invoiceableTotalTime;
  }

  public void setInvoiceableTotalTime(Integer invoiceableTotalTime) {
    this.invoiceableTotalTime = invoiceableTotalTime;
  }

  public TimeCardDto lastModifiedDateTime(LocalDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
    return this;
  }

   /**
   * The last time the time card line was modified
   * @return lastModifiedDateTime
  **/
  @ApiModelProperty(value = "The last time the time card line was modified")
  public LocalDateTime getLastModifiedDateTime() {
    return lastModifiedDateTime;
  }

  public void setLastModifiedDateTime(LocalDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
  }

  public TimeCardDto summary(List<TimeCardSummaryDto> summary) {
    this.summary = summary;
    return this;
  }

  public TimeCardDto addSummaryItem(TimeCardSummaryDto summaryItem) {
    if (this.summary == null) {
      this.summary = new ArrayList<>();
    }
    this.summary.add(summaryItem);
    return this;
  }

   /**
   * Time Card summary information
   * @return summary
  **/
  @ApiModelProperty(value = "Time Card summary information")
  public List<TimeCardSummaryDto> getSummary() {
    return summary;
  }

  public void setSummary(List<TimeCardSummaryDto> summary) {
    this.summary = summary;
  }

  public TimeCardDto approvalStatusText(String approvalStatusText) {
    this.approvalStatusText = approvalStatusText;
    return this;
  }

   /**
   * Get approvalStatusText
   * @return approvalStatusText
  **/
  @ApiModelProperty(value = "")
  public String getApprovalStatusText() {
    return approvalStatusText;
  }

  public void setApprovalStatusText(String approvalStatusText) {
    this.approvalStatusText = approvalStatusText;
  }

  public TimeCardDto extras(Map<String, Object> extras) {
    this.extras = extras;
    return this;
  }

  public TimeCardDto putExtrasItem(String key, Object extrasItem) {
    if (this.extras == null) {
      this.extras = new HashMap<>();
    }
    this.extras.put(key, extrasItem);
    return this;
  }

   /**
   * Get extras
   * @return extras
  **/
  @ApiModelProperty(value = "")
  public Map<String, Object> getExtras() {
    return extras;
  }

  public void setExtras(Map<String, Object> extras) {
    this.extras = extras;
  }

  public TimeCardDto errorInfo(String errorInfo) {
    this.errorInfo = errorInfo;
    return this;
  }

   /**
   * Get errorInfo
   * @return errorInfo
  **/
  @ApiModelProperty(value = "")
  public String getErrorInfo() {
    return errorInfo;
  }

  public void setErrorInfo(String errorInfo) {
    this.errorInfo = errorInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeCardDto timeCardDto = (TimeCardDto) o;
    return Objects.equals(this.refNbr, timeCardDto.refNbr) &&
        Objects.equals(this.status, timeCardDto.status) &&
        Objects.equals(this.approvalStatus, timeCardDto.approvalStatus) &&
        Objects.equals(this.week, timeCardDto.week) &&
        Objects.equals(this.employee, timeCardDto.employee) &&
        Objects.equals(this.type, timeCardDto.type) &&
        Objects.equals(this.origRefNbr, timeCardDto.origRefNbr) &&
        Objects.equals(this.timeSpent, timeCardDto.timeSpent) &&
        Objects.equals(this.invoiceable, timeCardDto.invoiceable) &&
        Objects.equals(this.overtimeSpent, timeCardDto.overtimeSpent) &&
        Objects.equals(this.invoiceableOvertime, timeCardDto.invoiceableOvertime) &&
        Objects.equals(this.totalTimeSpent, timeCardDto.totalTimeSpent) &&
        Objects.equals(this.invoiceableTotalTime, timeCardDto.invoiceableTotalTime) &&
        Objects.equals(this.lastModifiedDateTime, timeCardDto.lastModifiedDateTime) &&
        Objects.equals(this.summary, timeCardDto.summary) &&
        Objects.equals(this.approvalStatusText, timeCardDto.approvalStatusText) &&
        Objects.equals(this.extras, timeCardDto.extras) &&
        Objects.equals(this.errorInfo, timeCardDto.errorInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(refNbr, status, approvalStatus, week, employee, type, origRefNbr, timeSpent, invoiceable, overtimeSpent, invoiceableOvertime, totalTimeSpent, invoiceableTotalTime, lastModifiedDateTime, summary, approvalStatusText, extras, errorInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeCardDto {\n");
    
    sb.append("    refNbr: ").append(toIndentedString(refNbr)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    approvalStatus: ").append(toIndentedString(approvalStatus)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    origRefNbr: ").append(toIndentedString(origRefNbr)).append("\n");
    sb.append("    timeSpent: ").append(toIndentedString(timeSpent)).append("\n");
    sb.append("    invoiceable: ").append(toIndentedString(invoiceable)).append("\n");
    sb.append("    overtimeSpent: ").append(toIndentedString(overtimeSpent)).append("\n");
    sb.append("    invoiceableOvertime: ").append(toIndentedString(invoiceableOvertime)).append("\n");
    sb.append("    totalTimeSpent: ").append(toIndentedString(totalTimeSpent)).append("\n");
    sb.append("    invoiceableTotalTime: ").append(toIndentedString(invoiceableTotalTime)).append("\n");
    sb.append("    lastModifiedDateTime: ").append(toIndentedString(lastModifiedDateTime)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    approvalStatusText: ").append(toIndentedString(approvalStatusText)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("    errorInfo: ").append(toIndentedString(errorInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

