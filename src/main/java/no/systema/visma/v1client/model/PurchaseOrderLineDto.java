/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDateTime;
import no.systema.visma.v1client.model.AccountNumberTypeDescriptionDto;
import no.systema.visma.v1client.model.BranchNumberDto;
import no.systema.visma.v1client.model.DiscountCodeNumberDescriptionDto;
import no.systema.visma.v1client.model.InventoryNumberDescriptionDto;
import no.systema.visma.v1client.model.ProjectIdDescriptionDto;
import no.systema.visma.v1client.model.ProjectTaskIdDescriptionDto;
import no.systema.visma.v1client.model.SubAccountDto;
import no.systema.visma.v1client.model.TaxCategoryNumberDescriptionDto;
import no.systema.visma.v1client.model.WarehouseIdDescriptionDto;

/**
 * This class represents a Purchase Order Line in PurchaseOrderController. Used for getting data.
 */
@ApiModel(description = "This class represents a Purchase Order Line in PurchaseOrderController. Used for getting data.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T15:04:09.234+02:00")
public class PurchaseOrderLineDto {
  @JsonProperty("lineNbr")
  private Integer lineNbr = null;

  @JsonProperty("branch")
  private BranchNumberDto branch = null;

  @JsonProperty("inventory")
  private InventoryNumberDescriptionDto inventory = null;

  /**
   * Gets or Sets lineType
   */
  public enum LineTypeEnum {
    GOODSFORINVENTORY("GoodsForInventory"),
    
    GOODSFORSALESORDER("GoodsForSalesOrder"),
    
    GOODSFORREPLENISHMENT("GoodsForReplenishment"),
    
    GOODSFORDROPSHIP("GoodsForDropShip"),
    
    NONSTOCKFORDROPSHIP("NonStockForDropShip"),
    
    NONSTOCKFORSALESORDER("NonStockForSalesOrder"),
    
    NONSTOCK("NonStock"),
    
    SERVICE("Service"),
    
    FREIGHT("Freight"),
    
    DESCRIPTION("Description");

    private String value;

    LineTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LineTypeEnum fromValue(String text) {
      for (LineTypeEnum b : LineTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("lineType")
  private LineTypeEnum lineType = null;

  @JsonProperty("warehouse")
  private WarehouseIdDescriptionDto warehouse = null;

  @JsonProperty("lineDescription")
  private String lineDescription = null;

  @JsonProperty("uom")
  private String uom = null;

  @JsonProperty("orderQty")
  private Double orderQty = null;

  @JsonProperty("qtyOnReceipts")
  private Double qtyOnReceipts = null;

  @JsonProperty("unitCost")
  private Double unitCost = null;

  @JsonProperty("extCost")
  private Double extCost = null;

  @JsonProperty("discountPercent")
  private Double discountPercent = null;

  @JsonProperty("discountAmount")
  private Double discountAmount = null;

  @JsonProperty("manualDiscount")
  private Boolean manualDiscount = null;

  @JsonProperty("discountCode")
  private DiscountCodeNumberDescriptionDto discountCode = null;

  @JsonProperty("amount")
  private Double amount = null;

  @JsonProperty("receivedAmt")
  private Double receivedAmt = null;

  @JsonProperty("alternateId")
  private String alternateId = null;

  @JsonProperty("minReceipt")
  private Double minReceipt = null;

  @JsonProperty("maxReceipt")
  private Double maxReceipt = null;

  @JsonProperty("completeOn")
  private Double completeOn = null;

  /**
   * Gets or Sets receiptAction
   */
  public enum ReceiptActionEnum {
    REJECT("Reject"),
    
    ACCEPTBUTWARN("AcceptButWarn"),
    
    ACCEPT("Accept");

    private String value;

    ReceiptActionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ReceiptActionEnum fromValue(String text) {
      for (ReceiptActionEnum b : ReceiptActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("receiptAction")
  private ReceiptActionEnum receiptAction = null;

  @JsonProperty("taxCategory")
  private TaxCategoryNumberDescriptionDto taxCategory = null;

  @JsonProperty("account")
  private AccountNumberTypeDescriptionDto account = null;

  @JsonProperty("sub")
  private SubAccountDto sub = null;

  @JsonProperty("project")
  private ProjectIdDescriptionDto project = null;

  @JsonProperty("projectTask")
  private ProjectTaskIdDescriptionDto projectTask = null;

  @JsonProperty("requested")
  private LocalDateTime requested = null;

  @JsonProperty("promised")
  private LocalDateTime promised = null;

  @JsonProperty("completed")
  private Boolean completed = null;

  @JsonProperty("canceled")
  private Boolean canceled = null;

  /**
   * Gets or Sets orderType
   */
  public enum OrderTypeEnum {
    REGULARORDER("RegularOrder"),
    
    DROPSHIP("DropShip"),
    
    BLANKET("Blanket"),
    
    STANDARDBLANKET("StandardBlanket");

    private String value;

    OrderTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OrderTypeEnum fromValue(String text) {
      for (OrderTypeEnum b : OrderTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("orderType")
  private OrderTypeEnum orderType = null;

  @JsonProperty("orderNumber")
  private String orderNumber = null;

  public PurchaseOrderLineDto lineNbr(Integer lineNbr) {
    this.lineNbr = lineNbr;
    return this;
  }

   /**
   * Get lineNbr
   * @return lineNbr
  **/
  @ApiModelProperty(value = "")
  public Integer getLineNbr() {
    return lineNbr;
  }

  public void setLineNbr(Integer lineNbr) {
    this.lineNbr = lineNbr;
  }

  public PurchaseOrderLineDto branch(BranchNumberDto branch) {
    this.branch = branch;
    return this;
  }

   /**
   * Get branch
   * @return branch
  **/
  @ApiModelProperty(value = "")
  public BranchNumberDto getBranch() {
    return branch;
  }

  public void setBranch(BranchNumberDto branch) {
    this.branch = branch;
  }

  public PurchaseOrderLineDto inventory(InventoryNumberDescriptionDto inventory) {
    this.inventory = inventory;
    return this;
  }

   /**
   * Get inventory
   * @return inventory
  **/
  @ApiModelProperty(value = "")
  public InventoryNumberDescriptionDto getInventory() {
    return inventory;
  }

  public void setInventory(InventoryNumberDescriptionDto inventory) {
    this.inventory = inventory;
  }

  public PurchaseOrderLineDto lineType(LineTypeEnum lineType) {
    this.lineType = lineType;
    return this;
  }

   /**
   * Get lineType
   * @return lineType
  **/
  @ApiModelProperty(value = "")
  public LineTypeEnum getLineType() {
    return lineType;
  }

  public void setLineType(LineTypeEnum lineType) {
    this.lineType = lineType;
  }

  public PurchaseOrderLineDto warehouse(WarehouseIdDescriptionDto warehouse) {
    this.warehouse = warehouse;
    return this;
  }

   /**
   * Get warehouse
   * @return warehouse
  **/
  @ApiModelProperty(value = "")
  public WarehouseIdDescriptionDto getWarehouse() {
    return warehouse;
  }

  public void setWarehouse(WarehouseIdDescriptionDto warehouse) {
    this.warehouse = warehouse;
  }

  public PurchaseOrderLineDto lineDescription(String lineDescription) {
    this.lineDescription = lineDescription;
    return this;
  }

   /**
   * Get lineDescription
   * @return lineDescription
  **/
  @ApiModelProperty(value = "")
  public String getLineDescription() {
    return lineDescription;
  }

  public void setLineDescription(String lineDescription) {
    this.lineDescription = lineDescription;
  }

  public PurchaseOrderLineDto uom(String uom) {
    this.uom = uom;
    return this;
  }

   /**
   * Get uom
   * @return uom
  **/
  @ApiModelProperty(value = "")
  public String getUom() {
    return uom;
  }

  public void setUom(String uom) {
    this.uom = uom;
  }

  public PurchaseOrderLineDto orderQty(Double orderQty) {
    this.orderQty = orderQty;
    return this;
  }

   /**
   * Get orderQty
   * @return orderQty
  **/
  @ApiModelProperty(value = "")
  public Double getOrderQty() {
    return orderQty;
  }

  public void setOrderQty(Double orderQty) {
    this.orderQty = orderQty;
  }

  public PurchaseOrderLineDto qtyOnReceipts(Double qtyOnReceipts) {
    this.qtyOnReceipts = qtyOnReceipts;
    return this;
  }

   /**
   * Get qtyOnReceipts
   * @return qtyOnReceipts
  **/
  @ApiModelProperty(value = "")
  public Double getQtyOnReceipts() {
    return qtyOnReceipts;
  }

  public void setQtyOnReceipts(Double qtyOnReceipts) {
    this.qtyOnReceipts = qtyOnReceipts;
  }

  public PurchaseOrderLineDto unitCost(Double unitCost) {
    this.unitCost = unitCost;
    return this;
  }

   /**
   * Get unitCost
   * @return unitCost
  **/
  @ApiModelProperty(value = "")
  public Double getUnitCost() {
    return unitCost;
  }

  public void setUnitCost(Double unitCost) {
    this.unitCost = unitCost;
  }

  public PurchaseOrderLineDto extCost(Double extCost) {
    this.extCost = extCost;
    return this;
  }

   /**
   * Get extCost
   * @return extCost
  **/
  @ApiModelProperty(value = "")
  public Double getExtCost() {
    return extCost;
  }

  public void setExtCost(Double extCost) {
    this.extCost = extCost;
  }

  public PurchaseOrderLineDto discountPercent(Double discountPercent) {
    this.discountPercent = discountPercent;
    return this;
  }

   /**
   * Get discountPercent
   * @return discountPercent
  **/
  @ApiModelProperty(value = "")
  public Double getDiscountPercent() {
    return discountPercent;
  }

  public void setDiscountPercent(Double discountPercent) {
    this.discountPercent = discountPercent;
  }

  public PurchaseOrderLineDto discountAmount(Double discountAmount) {
    this.discountAmount = discountAmount;
    return this;
  }

   /**
   * Get discountAmount
   * @return discountAmount
  **/
  @ApiModelProperty(value = "")
  public Double getDiscountAmount() {
    return discountAmount;
  }

  public void setDiscountAmount(Double discountAmount) {
    this.discountAmount = discountAmount;
  }

  public PurchaseOrderLineDto manualDiscount(Boolean manualDiscount) {
    this.manualDiscount = manualDiscount;
    return this;
  }

   /**
   * Get manualDiscount
   * @return manualDiscount
  **/
  @ApiModelProperty(value = "")
  public Boolean isManualDiscount() {
    return manualDiscount;
  }

  public void setManualDiscount(Boolean manualDiscount) {
    this.manualDiscount = manualDiscount;
  }

  public PurchaseOrderLineDto discountCode(DiscountCodeNumberDescriptionDto discountCode) {
    this.discountCode = discountCode;
    return this;
  }

   /**
   * Get discountCode
   * @return discountCode
  **/
  @ApiModelProperty(value = "")
  public DiscountCodeNumberDescriptionDto getDiscountCode() {
    return discountCode;
  }

  public void setDiscountCode(DiscountCodeNumberDescriptionDto discountCode) {
    this.discountCode = discountCode;
  }

  public PurchaseOrderLineDto amount(Double amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @ApiModelProperty(value = "")
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }

  public PurchaseOrderLineDto receivedAmt(Double receivedAmt) {
    this.receivedAmt = receivedAmt;
    return this;
  }

   /**
   * Get receivedAmt
   * @return receivedAmt
  **/
  @ApiModelProperty(value = "")
  public Double getReceivedAmt() {
    return receivedAmt;
  }

  public void setReceivedAmt(Double receivedAmt) {
    this.receivedAmt = receivedAmt;
  }

  public PurchaseOrderLineDto alternateId(String alternateId) {
    this.alternateId = alternateId;
    return this;
  }

   /**
   * Get alternateId
   * @return alternateId
  **/
  @ApiModelProperty(value = "")
  public String getAlternateId() {
    return alternateId;
  }

  public void setAlternateId(String alternateId) {
    this.alternateId = alternateId;
  }

  public PurchaseOrderLineDto minReceipt(Double minReceipt) {
    this.minReceipt = minReceipt;
    return this;
  }

   /**
   * Get minReceipt
   * @return minReceipt
  **/
  @ApiModelProperty(value = "")
  public Double getMinReceipt() {
    return minReceipt;
  }

  public void setMinReceipt(Double minReceipt) {
    this.minReceipt = minReceipt;
  }

  public PurchaseOrderLineDto maxReceipt(Double maxReceipt) {
    this.maxReceipt = maxReceipt;
    return this;
  }

   /**
   * Get maxReceipt
   * @return maxReceipt
  **/
  @ApiModelProperty(value = "")
  public Double getMaxReceipt() {
    return maxReceipt;
  }

  public void setMaxReceipt(Double maxReceipt) {
    this.maxReceipt = maxReceipt;
  }

  public PurchaseOrderLineDto completeOn(Double completeOn) {
    this.completeOn = completeOn;
    return this;
  }

   /**
   * Get completeOn
   * @return completeOn
  **/
  @ApiModelProperty(value = "")
  public Double getCompleteOn() {
    return completeOn;
  }

  public void setCompleteOn(Double completeOn) {
    this.completeOn = completeOn;
  }

  public PurchaseOrderLineDto receiptAction(ReceiptActionEnum receiptAction) {
    this.receiptAction = receiptAction;
    return this;
  }

   /**
   * Get receiptAction
   * @return receiptAction
  **/
  @ApiModelProperty(value = "")
  public ReceiptActionEnum getReceiptAction() {
    return receiptAction;
  }

  public void setReceiptAction(ReceiptActionEnum receiptAction) {
    this.receiptAction = receiptAction;
  }

  public PurchaseOrderLineDto taxCategory(TaxCategoryNumberDescriptionDto taxCategory) {
    this.taxCategory = taxCategory;
    return this;
  }

   /**
   * Get taxCategory
   * @return taxCategory
  **/
  @ApiModelProperty(value = "")
  public TaxCategoryNumberDescriptionDto getTaxCategory() {
    return taxCategory;
  }

  public void setTaxCategory(TaxCategoryNumberDescriptionDto taxCategory) {
    this.taxCategory = taxCategory;
  }

  public PurchaseOrderLineDto account(AccountNumberTypeDescriptionDto account) {
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @ApiModelProperty(value = "")
  public AccountNumberTypeDescriptionDto getAccount() {
    return account;
  }

  public void setAccount(AccountNumberTypeDescriptionDto account) {
    this.account = account;
  }

  public PurchaseOrderLineDto sub(SubAccountDto sub) {
    this.sub = sub;
    return this;
  }

   /**
   * Get sub
   * @return sub
  **/
  @ApiModelProperty(value = "")
  public SubAccountDto getSub() {
    return sub;
  }

  public void setSub(SubAccountDto sub) {
    this.sub = sub;
  }

  public PurchaseOrderLineDto project(ProjectIdDescriptionDto project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @ApiModelProperty(value = "")
  public ProjectIdDescriptionDto getProject() {
    return project;
  }

  public void setProject(ProjectIdDescriptionDto project) {
    this.project = project;
  }

  public PurchaseOrderLineDto projectTask(ProjectTaskIdDescriptionDto projectTask) {
    this.projectTask = projectTask;
    return this;
  }

   /**
   * Get projectTask
   * @return projectTask
  **/
  @ApiModelProperty(value = "")
  public ProjectTaskIdDescriptionDto getProjectTask() {
    return projectTask;
  }

  public void setProjectTask(ProjectTaskIdDescriptionDto projectTask) {
    this.projectTask = projectTask;
  }

  public PurchaseOrderLineDto requested(LocalDateTime requested) {
    this.requested = requested;
    return this;
  }

   /**
   * Get requested
   * @return requested
  **/
  @ApiModelProperty(value = "")
  public LocalDateTime getRequested() {
    return requested;
  }

  public void setRequested(LocalDateTime requested) {
    this.requested = requested;
  }

  public PurchaseOrderLineDto promised(LocalDateTime promised) {
    this.promised = promised;
    return this;
  }

   /**
   * Get promised
   * @return promised
  **/
  @ApiModelProperty(value = "")
  public LocalDateTime getPromised() {
    return promised;
  }

  public void setPromised(LocalDateTime promised) {
    this.promised = promised;
  }

  public PurchaseOrderLineDto completed(Boolean completed) {
    this.completed = completed;
    return this;
  }

   /**
   * Get completed
   * @return completed
  **/
  @ApiModelProperty(value = "")
  public Boolean isCompleted() {
    return completed;
  }

  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }

  public PurchaseOrderLineDto canceled(Boolean canceled) {
    this.canceled = canceled;
    return this;
  }

   /**
   * Get canceled
   * @return canceled
  **/
  @ApiModelProperty(value = "")
  public Boolean isCanceled() {
    return canceled;
  }

  public void setCanceled(Boolean canceled) {
    this.canceled = canceled;
  }

  public PurchaseOrderLineDto orderType(OrderTypeEnum orderType) {
    this.orderType = orderType;
    return this;
  }

   /**
   * Get orderType
   * @return orderType
  **/
  @ApiModelProperty(value = "")
  public OrderTypeEnum getOrderType() {
    return orderType;
  }

  public void setOrderType(OrderTypeEnum orderType) {
    this.orderType = orderType;
  }

  public PurchaseOrderLineDto orderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
    return this;
  }

   /**
   * Get orderNumber
   * @return orderNumber
  **/
  @ApiModelProperty(value = "")
  public String getOrderNumber() {
    return orderNumber;
  }

  public void setOrderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseOrderLineDto purchaseOrderLineDto = (PurchaseOrderLineDto) o;
    return Objects.equals(this.lineNbr, purchaseOrderLineDto.lineNbr) &&
        Objects.equals(this.branch, purchaseOrderLineDto.branch) &&
        Objects.equals(this.inventory, purchaseOrderLineDto.inventory) &&
        Objects.equals(this.lineType, purchaseOrderLineDto.lineType) &&
        Objects.equals(this.warehouse, purchaseOrderLineDto.warehouse) &&
        Objects.equals(this.lineDescription, purchaseOrderLineDto.lineDescription) &&
        Objects.equals(this.uom, purchaseOrderLineDto.uom) &&
        Objects.equals(this.orderQty, purchaseOrderLineDto.orderQty) &&
        Objects.equals(this.qtyOnReceipts, purchaseOrderLineDto.qtyOnReceipts) &&
        Objects.equals(this.unitCost, purchaseOrderLineDto.unitCost) &&
        Objects.equals(this.extCost, purchaseOrderLineDto.extCost) &&
        Objects.equals(this.discountPercent, purchaseOrderLineDto.discountPercent) &&
        Objects.equals(this.discountAmount, purchaseOrderLineDto.discountAmount) &&
        Objects.equals(this.manualDiscount, purchaseOrderLineDto.manualDiscount) &&
        Objects.equals(this.discountCode, purchaseOrderLineDto.discountCode) &&
        Objects.equals(this.amount, purchaseOrderLineDto.amount) &&
        Objects.equals(this.receivedAmt, purchaseOrderLineDto.receivedAmt) &&
        Objects.equals(this.alternateId, purchaseOrderLineDto.alternateId) &&
        Objects.equals(this.minReceipt, purchaseOrderLineDto.minReceipt) &&
        Objects.equals(this.maxReceipt, purchaseOrderLineDto.maxReceipt) &&
        Objects.equals(this.completeOn, purchaseOrderLineDto.completeOn) &&
        Objects.equals(this.receiptAction, purchaseOrderLineDto.receiptAction) &&
        Objects.equals(this.taxCategory, purchaseOrderLineDto.taxCategory) &&
        Objects.equals(this.account, purchaseOrderLineDto.account) &&
        Objects.equals(this.sub, purchaseOrderLineDto.sub) &&
        Objects.equals(this.project, purchaseOrderLineDto.project) &&
        Objects.equals(this.projectTask, purchaseOrderLineDto.projectTask) &&
        Objects.equals(this.requested, purchaseOrderLineDto.requested) &&
        Objects.equals(this.promised, purchaseOrderLineDto.promised) &&
        Objects.equals(this.completed, purchaseOrderLineDto.completed) &&
        Objects.equals(this.canceled, purchaseOrderLineDto.canceled) &&
        Objects.equals(this.orderType, purchaseOrderLineDto.orderType) &&
        Objects.equals(this.orderNumber, purchaseOrderLineDto.orderNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lineNbr, branch, inventory, lineType, warehouse, lineDescription, uom, orderQty, qtyOnReceipts, unitCost, extCost, discountPercent, discountAmount, manualDiscount, discountCode, amount, receivedAmt, alternateId, minReceipt, maxReceipt, completeOn, receiptAction, taxCategory, account, sub, project, projectTask, requested, promised, completed, canceled, orderType, orderNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseOrderLineDto {\n");
    
    sb.append("    lineNbr: ").append(toIndentedString(lineNbr)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    lineType: ").append(toIndentedString(lineType)).append("\n");
    sb.append("    warehouse: ").append(toIndentedString(warehouse)).append("\n");
    sb.append("    lineDescription: ").append(toIndentedString(lineDescription)).append("\n");
    sb.append("    uom: ").append(toIndentedString(uom)).append("\n");
    sb.append("    orderQty: ").append(toIndentedString(orderQty)).append("\n");
    sb.append("    qtyOnReceipts: ").append(toIndentedString(qtyOnReceipts)).append("\n");
    sb.append("    unitCost: ").append(toIndentedString(unitCost)).append("\n");
    sb.append("    extCost: ").append(toIndentedString(extCost)).append("\n");
    sb.append("    discountPercent: ").append(toIndentedString(discountPercent)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    manualDiscount: ").append(toIndentedString(manualDiscount)).append("\n");
    sb.append("    discountCode: ").append(toIndentedString(discountCode)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    receivedAmt: ").append(toIndentedString(receivedAmt)).append("\n");
    sb.append("    alternateId: ").append(toIndentedString(alternateId)).append("\n");
    sb.append("    minReceipt: ").append(toIndentedString(minReceipt)).append("\n");
    sb.append("    maxReceipt: ").append(toIndentedString(maxReceipt)).append("\n");
    sb.append("    completeOn: ").append(toIndentedString(completeOn)).append("\n");
    sb.append("    receiptAction: ").append(toIndentedString(receiptAction)).append("\n");
    sb.append("    taxCategory: ").append(toIndentedString(taxCategory)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    sub: ").append(toIndentedString(sub)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    projectTask: ").append(toIndentedString(projectTask)).append("\n");
    sb.append("    requested: ").append(toIndentedString(requested)).append("\n");
    sb.append("    promised: ").append(toIndentedString(promised)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    canceled: ").append(toIndentedString(canceled)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

