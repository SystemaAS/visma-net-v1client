/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import no.systema.visma.v1client.model.DtoValueNullableDecimal;
import no.systema.visma.v1client.model.DtoValueNullableInt32;

/**
 * This class represent a Stocktake line in StocktakeContoller. Used to update a Stocktake line
 */
@ApiModel(description = "This class represent a Stocktake line in StocktakeContoller. Used to update a Stocktake line")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T15:04:09.234+02:00")
public class StocktakeLineUpdateDto {
  /**
   * Gets or Sets operation
   */
  public enum OperationEnum {
    INSERT("Insert"),
    
    UPDATE("Update"),
    
    DELETE("Delete");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OperationEnum fromValue(String text) {
      for (OperationEnum b : OperationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("operation")
  private OperationEnum operation = null;

  @JsonProperty("lineNbr")
  private DtoValueNullableInt32 lineNbr = null;

  @JsonProperty("physicalQuantity")
  private DtoValueNullableDecimal physicalQuantity = null;

  public StocktakeLineUpdateDto operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @ApiModelProperty(value = "")
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }

  public StocktakeLineUpdateDto lineNbr(DtoValueNullableInt32 lineNbr) {
    this.lineNbr = lineNbr;
    return this;
  }

   /**
   * Get lineNbr
   * @return lineNbr
  **/
  @ApiModelProperty(value = "")
  public DtoValueNullableInt32 getLineNbr() {
    return lineNbr;
  }

  public void setLineNbr(DtoValueNullableInt32 lineNbr) {
    this.lineNbr = lineNbr;
  }

  public StocktakeLineUpdateDto physicalQuantity(DtoValueNullableDecimal physicalQuantity) {
    this.physicalQuantity = physicalQuantity;
    return this;
  }

   /**
   * Get physicalQuantity
   * @return physicalQuantity
  **/
  @ApiModelProperty(value = "")
  public DtoValueNullableDecimal getPhysicalQuantity() {
    return physicalQuantity;
  }

  public void setPhysicalQuantity(DtoValueNullableDecimal physicalQuantity) {
    this.physicalQuantity = physicalQuantity;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StocktakeLineUpdateDto stocktakeLineUpdateDto = (StocktakeLineUpdateDto) o;
    return Objects.equals(this.operation, stocktakeLineUpdateDto.operation) &&
        Objects.equals(this.lineNbr, stocktakeLineUpdateDto.lineNbr) &&
        Objects.equals(this.physicalQuantity, stocktakeLineUpdateDto.physicalQuantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operation, lineNbr, physicalQuantity);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StocktakeLineUpdateDto {\n");
    
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    lineNbr: ").append(toIndentedString(lineNbr)).append("\n");
    sb.append("    physicalQuantity: ").append(toIndentedString(physicalQuantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

