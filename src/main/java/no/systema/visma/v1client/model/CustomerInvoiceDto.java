/*
 * Visma Net API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.13.03.0008
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package no.systema.visma.v1client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import no.systema.visma.v1client.model.AccountNumberDto;
import no.systema.visma.v1client.model.AttachmentDto;
import no.systema.visma.v1client.model.BranchNumberDto;
import no.systema.visma.v1client.model.ContactIdNameDto;
import no.systema.visma.v1client.model.CreditTermsDto;
import no.systema.visma.v1client.model.CustomerInvoiceLineDto;
import no.systema.visma.v1client.model.CustomerNumberDto;
import no.systema.visma.v1client.model.LocationDescriptionDto;
import no.systema.visma.v1client.model.PaymentMethodIdDescriptionDto;
import no.systema.visma.v1client.model.ProjectIdDescriptionDto;
import no.systema.visma.v1client.model.SubAccountDto;
import no.systema.visma.v1client.model.TaxDetailDto;

/**
 * This class represents a invoice in InvoiceController. Used by getting data.
 */
@ApiModel(description = "This class represents a invoice in InvoiceController. Used by getting data.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-16T15:04:09.234+02:00")
public class CustomerInvoiceDto {
  @JsonProperty("creditTerms")
  private CreditTermsDto creditTerms = null;

  @JsonProperty("documentDueDate")
  private LocalDateTime documentDueDate = null;

  @JsonProperty("cashDiscountDate")
  private LocalDateTime cashDiscountDate = null;

  @JsonProperty("externalReference")
  private String externalReference = null;

  @JsonProperty("isRotRutDeductible")
  private Boolean isRotRutDeductible = null;

  @JsonProperty("exchangeRate")
  private Double exchangeRate = null;

  @JsonProperty("dunningLetterDate")
  private LocalDateTime dunningLetterDate = null;

  @JsonProperty("dunningLetterLevel")
  private Integer dunningLetterLevel = null;

  @JsonProperty("contact")
  private ContactIdNameDto contact = null;

  @JsonProperty("attachments")
  private List<AttachmentDto> attachments = null;

  @JsonProperty("taxDetails")
  private List<TaxDetailDto> taxDetails = null;

  @JsonProperty("invoiceLines")
  private List<CustomerInvoiceLineDto> invoiceLines = null;

  @JsonProperty("hold")
  private Boolean hold = null;

  @JsonProperty("detailTotal")
  private Double detailTotal = null;

  @JsonProperty("detailTotalInCurrency")
  private Double detailTotalInCurrency = null;

  @JsonProperty("vatTaxableTotal")
  private Double vatTaxableTotal = null;

  @JsonProperty("vatTaxableTotalInCurrency")
  private Double vatTaxableTotalInCurrency = null;

  @JsonProperty("vatExemptTotal")
  private Double vatExemptTotal = null;

  @JsonProperty("vatExemptTotalInCurrency")
  private Double vatExemptTotalInCurrency = null;

  @JsonProperty("salesPersonID")
  private Integer salesPersonID = null;

  @JsonProperty("salesPersonDescr")
  private String salesPersonDescr = null;

  @JsonProperty("paymentReference")
  private String paymentReference = null;

  @JsonProperty("customer")
  private CustomerNumberDto customer = null;

  /**
   * Gets or Sets documentType
   */
  public enum DocumentTypeEnum {
    INVOICE("Invoice"),
    
    DEBITNOTE("DebitNote"),
    
    CREDITNOTE("CreditNote"),
    
    PAYMENT("Payment"),
    
    VOIDPAYMENT("VoidPayment"),
    
    PREPAYMENT("Prepayment"),
    
    REFUND("Refund"),
    
    FINCHARGE("FinCharge"),
    
    SMALLBALANCEWO("SmallBalanceWo"),
    
    SMALLCREDITWO("SmallCreditWo"),
    
    CASHSALE("CashSale"),
    
    CASHRETURN("CashReturn"),
    
    UNDEFINED("Undefined"),
    
    NOUPDATE("NoUpdate");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DocumentTypeEnum fromValue(String text) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("documentType")
  private DocumentTypeEnum documentType = null;

  @JsonProperty("referenceNumber")
  private String referenceNumber = null;

  @JsonProperty("postPeriod")
  private String postPeriod = null;

  @JsonProperty("financialPeriod")
  private String financialPeriod = null;

  @JsonProperty("closedFinancialPeriod")
  private String closedFinancialPeriod = null;

  @JsonProperty("documentDate")
  private LocalDateTime documentDate = null;

  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    HOLD("Hold"),
    
    BALANCED("Balanced"),
    
    VOIDED("Voided"),
    
    SCHEDULED("Scheduled"),
    
    OPEN("Open"),
    
    CLOSED("Closed"),
    
    PENDINGPRINT("PendingPrint"),
    
    PENDINGEMAIL("PendingEmail"),
    
    CREDITHOLD("CreditHold"),
    
    CCHOLD("CcHold"),
    
    RESERVED("Reserved");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("currencyId")
  private String currencyId = null;

  @JsonProperty("amount")
  private Double amount = null;

  @JsonProperty("amountInCurrency")
  private Double amountInCurrency = null;

  @JsonProperty("balance")
  private Double balance = null;

  @JsonProperty("balanceInCurrency")
  private Double balanceInCurrency = null;

  @JsonProperty("cashDiscount")
  private Double cashDiscount = null;

  @JsonProperty("cashDiscountInCurrency")
  private Double cashDiscountInCurrency = null;

  @JsonProperty("paymentMethod")
  private PaymentMethodIdDescriptionDto paymentMethod = null;

  @JsonProperty("customerRefNumber")
  private String customerRefNumber = null;

  @JsonProperty("invoiceText")
  private String invoiceText = null;

  @JsonProperty("lastModifiedDateTime")
  private LocalDateTime lastModifiedDateTime = null;

  @JsonProperty("createdDateTime")
  private LocalDateTime createdDateTime = null;

  @JsonProperty("note")
  private String note = null;

  @JsonProperty("vatTotal")
  private Double vatTotal = null;

  @JsonProperty("vatTotalInCurrency")
  private Double vatTotalInCurrency = null;

  @JsonProperty("location")
  private LocationDescriptionDto location = null;

  @JsonProperty("branchNumber")
  private BranchNumberDto branchNumber = null;

  @JsonProperty("cashAccount")
  private String cashAccount = null;

  @JsonProperty("project")
  private ProjectIdDescriptionDto project = null;

  @JsonProperty("account")
  private AccountNumberDto account = null;

  @JsonProperty("subaccount")
  private SubAccountDto subaccount = null;

  @JsonProperty("extras")
  private Map<String, Object> extras = null;

  @JsonProperty("errorInfo")
  private String errorInfo = null;

  public CustomerInvoiceDto creditTerms(CreditTermsDto creditTerms) {
    this.creditTerms = creditTerms;
    return this;
  }

   /**
   * Get creditTerms
   * @return creditTerms
  **/
  @ApiModelProperty(value = "")
  public CreditTermsDto getCreditTerms() {
    return creditTerms;
  }

  public void setCreditTerms(CreditTermsDto creditTerms) {
    this.creditTerms = creditTerms;
  }

  public CustomerInvoiceDto documentDueDate(LocalDateTime documentDueDate) {
    this.documentDueDate = documentDueDate;
    return this;
  }

   /**
   * The date when payment for the document is due, in accordance with the credit terms.
   * @return documentDueDate
  **/
  @ApiModelProperty(value = "The date when payment for the document is due, in accordance with the credit terms.")
  public LocalDateTime getDocumentDueDate() {
    return documentDueDate;
  }

  public void setDocumentDueDate(LocalDateTime documentDueDate) {
    this.documentDueDate = documentDueDate;
  }

  public CustomerInvoiceDto cashDiscountDate(LocalDateTime cashDiscountDate) {
    this.cashDiscountDate = cashDiscountDate;
    return this;
  }

   /**
   * The end date of the cash discount period, which the system calculates by using the credit terms.
   * @return cashDiscountDate
  **/
  @ApiModelProperty(value = "The end date of the cash discount period, which the system calculates by using the credit terms.")
  public LocalDateTime getCashDiscountDate() {
    return cashDiscountDate;
  }

  public void setCashDiscountDate(LocalDateTime cashDiscountDate) {
    this.cashDiscountDate = cashDiscountDate;
  }

  public CustomerInvoiceDto externalReference(String externalReference) {
    this.externalReference = externalReference;
    return this;
  }

   /**
   * 
   * @return externalReference
  **/
  @ApiModelProperty(value = "")
  public String getExternalReference() {
    return externalReference;
  }

  public void setExternalReference(String externalReference) {
    this.externalReference = externalReference;
  }

  public CustomerInvoiceDto isRotRutDeductible(Boolean isRotRutDeductible) {
    this.isRotRutDeductible = isRotRutDeductible;
    return this;
  }

   /**
   * Get isRotRutDeductible
   * @return isRotRutDeductible
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsRotRutDeductible() {
    return isRotRutDeductible;
  }

  public void setIsRotRutDeductible(Boolean isRotRutDeductible) {
    this.isRotRutDeductible = isRotRutDeductible;
  }

  public CustomerInvoiceDto exchangeRate(Double exchangeRate) {
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * Get exchangeRate
   * @return exchangeRate
  **/
  @ApiModelProperty(value = "")
  public Double getExchangeRate() {
    return exchangeRate;
  }

  public void setExchangeRate(Double exchangeRate) {
    this.exchangeRate = exchangeRate;
  }

  public CustomerInvoiceDto dunningLetterDate(LocalDateTime dunningLetterDate) {
    this.dunningLetterDate = dunningLetterDate;
    return this;
  }

   /**
   * The date of the last released dunning letter in which the document was listed.
   * @return dunningLetterDate
  **/
  @ApiModelProperty(value = "The date of the last released dunning letter in which the document was listed.")
  public LocalDateTime getDunningLetterDate() {
    return dunningLetterDate;
  }

  public void setDunningLetterDate(LocalDateTime dunningLetterDate) {
    this.dunningLetterDate = dunningLetterDate;
  }

  public CustomerInvoiceDto dunningLetterLevel(Integer dunningLetterLevel) {
    this.dunningLetterLevel = dunningLetterLevel;
    return this;
  }

   /**
   * The dunning level of the document.
   * @return dunningLetterLevel
  **/
  @ApiModelProperty(value = "The dunning level of the document.")
  public Integer getDunningLetterLevel() {
    return dunningLetterLevel;
  }

  public void setDunningLetterLevel(Integer dunningLetterLevel) {
    this.dunningLetterLevel = dunningLetterLevel;
  }

  public CustomerInvoiceDto contact(ContactIdNameDto contact) {
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @ApiModelProperty(value = "")
  public ContactIdNameDto getContact() {
    return contact;
  }

  public void setContact(ContactIdNameDto contact) {
    this.contact = contact;
  }

  public CustomerInvoiceDto attachments(List<AttachmentDto> attachments) {
    this.attachments = attachments;
    return this;
  }

  public CustomerInvoiceDto addAttachmentsItem(AttachmentDto attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @ApiModelProperty(value = "")
  public List<AttachmentDto> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<AttachmentDto> attachments) {
    this.attachments = attachments;
  }

  public CustomerInvoiceDto taxDetails(List<TaxDetailDto> taxDetails) {
    this.taxDetails = taxDetails;
    return this;
  }

  public CustomerInvoiceDto addTaxDetailsItem(TaxDetailDto taxDetailsItem) {
    if (this.taxDetails == null) {
      this.taxDetails = new ArrayList<>();
    }
    this.taxDetails.add(taxDetailsItem);
    return this;
  }

   /**
   * Get taxDetails
   * @return taxDetails
  **/
  @ApiModelProperty(value = "")
  public List<TaxDetailDto> getTaxDetails() {
    return taxDetails;
  }

  public void setTaxDetails(List<TaxDetailDto> taxDetails) {
    this.taxDetails = taxDetails;
  }

  public CustomerInvoiceDto invoiceLines(List<CustomerInvoiceLineDto> invoiceLines) {
    this.invoiceLines = invoiceLines;
    return this;
  }

  public CustomerInvoiceDto addInvoiceLinesItem(CustomerInvoiceLineDto invoiceLinesItem) {
    if (this.invoiceLines == null) {
      this.invoiceLines = new ArrayList<>();
    }
    this.invoiceLines.add(invoiceLinesItem);
    return this;
  }

   /**
   * Get invoiceLines
   * @return invoiceLines
  **/
  @ApiModelProperty(value = "")
  public List<CustomerInvoiceLineDto> getInvoiceLines() {
    return invoiceLines;
  }

  public void setInvoiceLines(List<CustomerInvoiceLineDto> invoiceLines) {
    this.invoiceLines = invoiceLines;
  }

  public CustomerInvoiceDto hold(Boolean hold) {
    this.hold = hold;
    return this;
  }

   /**
   * A flag that indicates if the document is a draft. A document with the On Hold status may be edited and cannot be released.
   * @return hold
  **/
  @ApiModelProperty(value = "A flag that indicates if the document is a draft. A document with the On Hold status may be edited and cannot be released.")
  public Boolean isHold() {
    return hold;
  }

  public void setHold(Boolean hold) {
    this.hold = hold;
  }

  public CustomerInvoiceDto detailTotal(Double detailTotal) {
    this.detailTotal = detailTotal;
    return this;
  }

   /**
   * The document total, which the system calculates for all line items in the Document Details tab.
   * @return detailTotal
  **/
  @ApiModelProperty(value = "The document total, which the system calculates for all line items in the Document Details tab.")
  public Double getDetailTotal() {
    return detailTotal;
  }

  public void setDetailTotal(Double detailTotal) {
    this.detailTotal = detailTotal;
  }

  public CustomerInvoiceDto detailTotalInCurrency(Double detailTotalInCurrency) {
    this.detailTotalInCurrency = detailTotalInCurrency;
    return this;
  }

   /**
   * Get detailTotalInCurrency
   * @return detailTotalInCurrency
  **/
  @ApiModelProperty(value = "")
  public Double getDetailTotalInCurrency() {
    return detailTotalInCurrency;
  }

  public void setDetailTotalInCurrency(Double detailTotalInCurrency) {
    this.detailTotalInCurrency = detailTotalInCurrency;
  }

  public CustomerInvoiceDto vatTaxableTotal(Double vatTaxableTotal) {
    this.vatTaxableTotal = vatTaxableTotal;
    return this;
  }

   /**
   * The document total that is subjected to VAT.
   * @return vatTaxableTotal
  **/
  @ApiModelProperty(value = "The document total that is subjected to VAT.")
  public Double getVatTaxableTotal() {
    return vatTaxableTotal;
  }

  public void setVatTaxableTotal(Double vatTaxableTotal) {
    this.vatTaxableTotal = vatTaxableTotal;
  }

  public CustomerInvoiceDto vatTaxableTotalInCurrency(Double vatTaxableTotalInCurrency) {
    this.vatTaxableTotalInCurrency = vatTaxableTotalInCurrency;
    return this;
  }

   /**
   * Get vatTaxableTotalInCurrency
   * @return vatTaxableTotalInCurrency
  **/
  @ApiModelProperty(value = "")
  public Double getVatTaxableTotalInCurrency() {
    return vatTaxableTotalInCurrency;
  }

  public void setVatTaxableTotalInCurrency(Double vatTaxableTotalInCurrency) {
    this.vatTaxableTotalInCurrency = vatTaxableTotalInCurrency;
  }

  public CustomerInvoiceDto vatExemptTotal(Double vatExemptTotal) {
    this.vatExemptTotal = vatExemptTotal;
    return this;
  }

   /**
   * The document total that is exempt from VAT. This total is calculated as the taxable amount for the   tax with the Include in VAT Exempt Total check box selected on the Taxes form.This box is available   only if the VAT Reporting feature is enabled in your system.
   * @return vatExemptTotal
  **/
  @ApiModelProperty(value = "The document total that is exempt from VAT. This total is calculated as the taxable amount for the   tax with the Include in VAT Exempt Total check box selected on the Taxes form.This box is available   only if the VAT Reporting feature is enabled in your system.")
  public Double getVatExemptTotal() {
    return vatExemptTotal;
  }

  public void setVatExemptTotal(Double vatExemptTotal) {
    this.vatExemptTotal = vatExemptTotal;
  }

  public CustomerInvoiceDto vatExemptTotalInCurrency(Double vatExemptTotalInCurrency) {
    this.vatExemptTotalInCurrency = vatExemptTotalInCurrency;
    return this;
  }

   /**
   * Get vatExemptTotalInCurrency
   * @return vatExemptTotalInCurrency
  **/
  @ApiModelProperty(value = "")
  public Double getVatExemptTotalInCurrency() {
    return vatExemptTotalInCurrency;
  }

  public void setVatExemptTotalInCurrency(Double vatExemptTotalInCurrency) {
    this.vatExemptTotalInCurrency = vatExemptTotalInCurrency;
  }

  public CustomerInvoiceDto salesPersonID(Integer salesPersonID) {
    this.salesPersonID = salesPersonID;
    return this;
  }

   /**
   * The identifier of the salesperson involved.
   * @return salesPersonID
  **/
  @ApiModelProperty(value = "The identifier of the salesperson involved.")
  public Integer getSalesPersonID() {
    return salesPersonID;
  }

  public void setSalesPersonID(Integer salesPersonID) {
    this.salesPersonID = salesPersonID;
  }

  public CustomerInvoiceDto salesPersonDescr(String salesPersonDescr) {
    this.salesPersonDescr = salesPersonDescr;
    return this;
  }

   /**
   * Get salesPersonDescr
   * @return salesPersonDescr
  **/
  @ApiModelProperty(value = "")
  public String getSalesPersonDescr() {
    return salesPersonDescr;
  }

  public void setSalesPersonDescr(String salesPersonDescr) {
    this.salesPersonDescr = salesPersonDescr;
  }

  public CustomerInvoiceDto paymentReference(String paymentReference) {
    this.paymentReference = paymentReference;
    return this;
  }

   /**
   * Get paymentReference
   * @return paymentReference
  **/
  @ApiModelProperty(value = "")
  public String getPaymentReference() {
    return paymentReference;
  }

  public void setPaymentReference(String paymentReference) {
    this.paymentReference = paymentReference;
  }

  public CustomerInvoiceDto customer(CustomerNumberDto customer) {
    this.customer = customer;
    return this;
  }

   /**
   * The customer associated with the document.
   * @return customer
  **/
  @ApiModelProperty(value = "The customer associated with the document.")
  public CustomerNumberDto getCustomer() {
    return customer;
  }

  public void setCustomer(CustomerNumberDto customer) {
    this.customer = customer;
  }

  public CustomerInvoiceDto documentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

   /**
   * Get documentType
   * @return documentType
  **/
  @ApiModelProperty(value = "")
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }

  public CustomerInvoiceDto referenceNumber(String referenceNumber) {
    this.referenceNumber = referenceNumber;
    return this;
  }

   /**
   * The reference number of the Accounts Receivable document in the system.
   * @return referenceNumber
  **/
  @ApiModelProperty(value = "The reference number of the Accounts Receivable document in the system.")
  public String getReferenceNumber() {
    return referenceNumber;
  }

  public void setReferenceNumber(String referenceNumber) {
    this.referenceNumber = referenceNumber;
  }

  public CustomerInvoiceDto postPeriod(String postPeriod) {
    this.postPeriod = postPeriod;
    return this;
  }

   /**
   * The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.
   * @return postPeriod
  **/
  @ApiModelProperty(value = "The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.")
  public String getPostPeriod() {
    return postPeriod;
  }

  public void setPostPeriod(String postPeriod) {
    this.postPeriod = postPeriod;
  }

  public CustomerInvoiceDto financialPeriod(String financialPeriod) {
    this.financialPeriod = financialPeriod;
    return this;
  }

   /**
   * The financial period to which the transactions recorded in the document should be posted. Format YYYYMM.
   * @return financialPeriod
  **/
  @ApiModelProperty(value = "The financial period to which the transactions recorded in the document should be posted. Format YYYYMM.")
  public String getFinancialPeriod() {
    return financialPeriod;
  }

  public void setFinancialPeriod(String financialPeriod) {
    this.financialPeriod = financialPeriod;
  }

  public CustomerInvoiceDto closedFinancialPeriod(String closedFinancialPeriod) {
    this.closedFinancialPeriod = closedFinancialPeriod;
    return this;
  }

   /**
   * Format YYYYMM.
   * @return closedFinancialPeriod
  **/
  @ApiModelProperty(value = "Format YYYYMM.")
  public String getClosedFinancialPeriod() {
    return closedFinancialPeriod;
  }

  public void setClosedFinancialPeriod(String closedFinancialPeriod) {
    this.closedFinancialPeriod = closedFinancialPeriod;
  }

  public CustomerInvoiceDto documentDate(LocalDateTime documentDate) {
    this.documentDate = documentDate;
    return this;
  }

   /**
   * The date when the Accounts Receivable document was created.   By default, for a new document, it is the current business date, but you can change the date.
   * @return documentDate
  **/
  @ApiModelProperty(value = "The date when the Accounts Receivable document was created.   By default, for a new document, it is the current business date, but you can change the date.")
  public LocalDateTime getDocumentDate() {
    return documentDate;
  }

  public void setDocumentDate(LocalDateTime documentDate) {
    this.documentDate = documentDate;
  }

  public CustomerInvoiceDto status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public CustomerInvoiceDto currencyId(String currencyId) {
    this.currencyId = currencyId;
    return this;
  }

   /**
   * The currency of the document. By default, it is the customer&#39;s default currency,  but it can be changed if the Allow Currency Override check box is selected on   the Customers
   * @return currencyId
  **/
  @ApiModelProperty(value = "The currency of the document. By default, it is the customer's default currency,  but it can be changed if the Allow Currency Override check box is selected on   the Customers")
  public String getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(String currencyId) {
    this.currencyId = currencyId;
  }

  public CustomerInvoiceDto amount(Double amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The amount paid by the document. The value appears for new documents if the   Validate Document Totals on Entry check box is selected on the Accounts Receivable Preferences screen.  If the check box is cleared, then the value appears when the document status is Open.
   * @return amount
  **/
  @ApiModelProperty(value = "The amount paid by the document. The value appears for new documents if the   Validate Document Totals on Entry check box is selected on the Accounts Receivable Preferences screen.  If the check box is cleared, then the value appears when the document status is Open.")
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }

  public CustomerInvoiceDto amountInCurrency(Double amountInCurrency) {
    this.amountInCurrency = amountInCurrency;
    return this;
  }

   /**
   * Get amountInCurrency
   * @return amountInCurrency
  **/
  @ApiModelProperty(value = "")
  public Double getAmountInCurrency() {
    return amountInCurrency;
  }

  public void setAmountInCurrency(Double amountInCurrency) {
    this.amountInCurrency = amountInCurrency;
  }

  public CustomerInvoiceDto balance(Double balance) {
    this.balance = balance;
    return this;
  }

   /**
   * For an open Accounts Receivable document, the balance after any cash discount was taken.  For a document used in the application process, this is the balance  after the payments were applied.
   * @return balance
  **/
  @ApiModelProperty(value = "For an open Accounts Receivable document, the balance after any cash discount was taken.  For a document used in the application process, this is the balance  after the payments were applied.")
  public Double getBalance() {
    return balance;
  }

  public void setBalance(Double balance) {
    this.balance = balance;
  }

  public CustomerInvoiceDto balanceInCurrency(Double balanceInCurrency) {
    this.balanceInCurrency = balanceInCurrency;
    return this;
  }

   /**
   * Get balanceInCurrency
   * @return balanceInCurrency
  **/
  @ApiModelProperty(value = "")
  public Double getBalanceInCurrency() {
    return balanceInCurrency;
  }

  public void setBalanceInCurrency(Double balanceInCurrency) {
    this.balanceInCurrency = balanceInCurrency;
  }

  public CustomerInvoiceDto cashDiscount(Double cashDiscount) {
    this.cashDiscount = cashDiscount;
    return this;
  }

   /**
   * The cash discount amount that has been or will be taken on the document, which  the system calculates based on the specified credit terms.
   * @return cashDiscount
  **/
  @ApiModelProperty(value = "The cash discount amount that has been or will be taken on the document, which  the system calculates based on the specified credit terms.")
  public Double getCashDiscount() {
    return cashDiscount;
  }

  public void setCashDiscount(Double cashDiscount) {
    this.cashDiscount = cashDiscount;
  }

  public CustomerInvoiceDto cashDiscountInCurrency(Double cashDiscountInCurrency) {
    this.cashDiscountInCurrency = cashDiscountInCurrency;
    return this;
  }

   /**
   * Get cashDiscountInCurrency
   * @return cashDiscountInCurrency
  **/
  @ApiModelProperty(value = "")
  public Double getCashDiscountInCurrency() {
    return cashDiscountInCurrency;
  }

  public void setCashDiscountInCurrency(Double cashDiscountInCurrency) {
    this.cashDiscountInCurrency = cashDiscountInCurrency;
  }

  public CustomerInvoiceDto paymentMethod(PaymentMethodIdDescriptionDto paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @ApiModelProperty(value = "")
  public PaymentMethodIdDescriptionDto getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(PaymentMethodIdDescriptionDto paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  public CustomerInvoiceDto customerRefNumber(String customerRefNumber) {
    this.customerRefNumber = customerRefNumber;
    return this;
  }

   /**
   * Get customerRefNumber
   * @return customerRefNumber
  **/
  @ApiModelProperty(value = "")
  public String getCustomerRefNumber() {
    return customerRefNumber;
  }

  public void setCustomerRefNumber(String customerRefNumber) {
    this.customerRefNumber = customerRefNumber;
  }

  public CustomerInvoiceDto invoiceText(String invoiceText) {
    this.invoiceText = invoiceText;
    return this;
  }

   /**
   * Any user-provided description of the Accounts Receivable document.
   * @return invoiceText
  **/
  @ApiModelProperty(value = "Any user-provided description of the Accounts Receivable document.")
  public String getInvoiceText() {
    return invoiceText;
  }

  public void setInvoiceText(String invoiceText) {
    this.invoiceText = invoiceText;
  }

  public CustomerInvoiceDto lastModifiedDateTime(LocalDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
    return this;
  }

   /**
   * Get lastModifiedDateTime
   * @return lastModifiedDateTime
  **/
  @ApiModelProperty(value = "")
  public LocalDateTime getLastModifiedDateTime() {
    return lastModifiedDateTime;
  }

  public void setLastModifiedDateTime(LocalDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
  }

  public CustomerInvoiceDto createdDateTime(LocalDateTime createdDateTime) {
    this.createdDateTime = createdDateTime;
    return this;
  }

   /**
   * Get createdDateTime
   * @return createdDateTime
  **/
  @ApiModelProperty(value = "")
  public LocalDateTime getCreatedDateTime() {
    return createdDateTime;
  }

  public void setCreatedDateTime(LocalDateTime createdDateTime) {
    this.createdDateTime = createdDateTime;
  }

  public CustomerInvoiceDto note(String note) {
    this.note = note;
    return this;
  }

   /**
   * Get note
   * @return note
  **/
  @ApiModelProperty(value = "")
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public CustomerInvoiceDto vatTotal(Double vatTotal) {
    this.vatTotal = vatTotal;
    return this;
  }

   /**
   * The document vat amount, as defined on the Tax Details tab.
   * @return vatTotal
  **/
  @ApiModelProperty(value = "The document vat amount, as defined on the Tax Details tab.")
  public Double getVatTotal() {
    return vatTotal;
  }

  public void setVatTotal(Double vatTotal) {
    this.vatTotal = vatTotal;
  }

  public CustomerInvoiceDto vatTotalInCurrency(Double vatTotalInCurrency) {
    this.vatTotalInCurrency = vatTotalInCurrency;
    return this;
  }

   /**
   * Get vatTotalInCurrency
   * @return vatTotalInCurrency
  **/
  @ApiModelProperty(value = "")
  public Double getVatTotalInCurrency() {
    return vatTotalInCurrency;
  }

  public void setVatTotalInCurrency(Double vatTotalInCurrency) {
    this.vatTotalInCurrency = vatTotalInCurrency;
  }

  public CustomerInvoiceDto location(LocationDescriptionDto location) {
    this.location = location;
    return this;
  }

   /**
   * The location of the customer related to the document. By default, it is the default  location of the selected customer or, if the invoice is created from an opportunity,  it is the customer location specified for the opportunity.
   * @return location
  **/
  @ApiModelProperty(value = "The location of the customer related to the document. By default, it is the default  location of the selected customer or, if the invoice is created from an opportunity,  it is the customer location specified for the opportunity.")
  public LocationDescriptionDto getLocation() {
    return location;
  }

  public void setLocation(LocationDescriptionDto location) {
    this.location = location;
  }

  public CustomerInvoiceDto branchNumber(BranchNumberDto branchNumber) {
    this.branchNumber = branchNumber;
    return this;
  }

   /**
   * The branch with which this invoice or memo is associated.
   * @return branchNumber
  **/
  @ApiModelProperty(value = "The branch with which this invoice or memo is associated.")
  public BranchNumberDto getBranchNumber() {
    return branchNumber;
  }

  public void setBranchNumber(BranchNumberDto branchNumber) {
    this.branchNumber = branchNumber;
  }

  public CustomerInvoiceDto cashAccount(String cashAccount) {
    this.cashAccount = cashAccount;
    return this;
  }

   /**
   * The cash account associated with the payment method.
   * @return cashAccount
  **/
  @ApiModelProperty(value = "The cash account associated with the payment method.")
  public String getCashAccount() {
    return cashAccount;
  }

  public void setCashAccount(String cashAccount) {
    this.cashAccount = cashAccount;
  }

  public CustomerInvoiceDto project(ProjectIdDescriptionDto project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @ApiModelProperty(value = "")
  public ProjectIdDescriptionDto getProject() {
    return project;
  }

  public void setProject(ProjectIdDescriptionDto project) {
    this.project = project;
  }

  public CustomerInvoiceDto account(AccountNumberDto account) {
    this.account = account;
    return this;
  }

   /**
   * The liability account specified as the AR account for the selected location of the customer.
   * @return account
  **/
  @ApiModelProperty(value = "The liability account specified as the AR account for the selected location of the customer.")
  public AccountNumberDto getAccount() {
    return account;
  }

  public void setAccount(AccountNumberDto account) {
    this.account = account;
  }

  public CustomerInvoiceDto subaccount(SubAccountDto subaccount) {
    this.subaccount = subaccount;
    return this;
  }

   /**
   * The corresponding subaccount used for the customer.
   * @return subaccount
  **/
  @ApiModelProperty(value = "The corresponding subaccount used for the customer.")
  public SubAccountDto getSubaccount() {
    return subaccount;
  }

  public void setSubaccount(SubAccountDto subaccount) {
    this.subaccount = subaccount;
  }

  public CustomerInvoiceDto extras(Map<String, Object> extras) {
    this.extras = extras;
    return this;
  }

  public CustomerInvoiceDto putExtrasItem(String key, Object extrasItem) {
    if (this.extras == null) {
      this.extras = new HashMap<>();
    }
    this.extras.put(key, extrasItem);
    return this;
  }

   /**
   * Get extras
   * @return extras
  **/
  @ApiModelProperty(value = "")
  public Map<String, Object> getExtras() {
    return extras;
  }

  public void setExtras(Map<String, Object> extras) {
    this.extras = extras;
  }

  public CustomerInvoiceDto errorInfo(String errorInfo) {
    this.errorInfo = errorInfo;
    return this;
  }

   /**
   * Get errorInfo
   * @return errorInfo
  **/
  @ApiModelProperty(value = "")
  public String getErrorInfo() {
    return errorInfo;
  }

  public void setErrorInfo(String errorInfo) {
    this.errorInfo = errorInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerInvoiceDto customerInvoiceDto = (CustomerInvoiceDto) o;
    return Objects.equals(this.creditTerms, customerInvoiceDto.creditTerms) &&
        Objects.equals(this.documentDueDate, customerInvoiceDto.documentDueDate) &&
        Objects.equals(this.cashDiscountDate, customerInvoiceDto.cashDiscountDate) &&
        Objects.equals(this.externalReference, customerInvoiceDto.externalReference) &&
        Objects.equals(this.isRotRutDeductible, customerInvoiceDto.isRotRutDeductible) &&
        Objects.equals(this.exchangeRate, customerInvoiceDto.exchangeRate) &&
        Objects.equals(this.dunningLetterDate, customerInvoiceDto.dunningLetterDate) &&
        Objects.equals(this.dunningLetterLevel, customerInvoiceDto.dunningLetterLevel) &&
        Objects.equals(this.contact, customerInvoiceDto.contact) &&
        Objects.equals(this.attachments, customerInvoiceDto.attachments) &&
        Objects.equals(this.taxDetails, customerInvoiceDto.taxDetails) &&
        Objects.equals(this.invoiceLines, customerInvoiceDto.invoiceLines) &&
        Objects.equals(this.hold, customerInvoiceDto.hold) &&
        Objects.equals(this.detailTotal, customerInvoiceDto.detailTotal) &&
        Objects.equals(this.detailTotalInCurrency, customerInvoiceDto.detailTotalInCurrency) &&
        Objects.equals(this.vatTaxableTotal, customerInvoiceDto.vatTaxableTotal) &&
        Objects.equals(this.vatTaxableTotalInCurrency, customerInvoiceDto.vatTaxableTotalInCurrency) &&
        Objects.equals(this.vatExemptTotal, customerInvoiceDto.vatExemptTotal) &&
        Objects.equals(this.vatExemptTotalInCurrency, customerInvoiceDto.vatExemptTotalInCurrency) &&
        Objects.equals(this.salesPersonID, customerInvoiceDto.salesPersonID) &&
        Objects.equals(this.salesPersonDescr, customerInvoiceDto.salesPersonDescr) &&
        Objects.equals(this.paymentReference, customerInvoiceDto.paymentReference) &&
        Objects.equals(this.customer, customerInvoiceDto.customer) &&
        Objects.equals(this.documentType, customerInvoiceDto.documentType) &&
        Objects.equals(this.referenceNumber, customerInvoiceDto.referenceNumber) &&
        Objects.equals(this.postPeriod, customerInvoiceDto.postPeriod) &&
        Objects.equals(this.financialPeriod, customerInvoiceDto.financialPeriod) &&
        Objects.equals(this.closedFinancialPeriod, customerInvoiceDto.closedFinancialPeriod) &&
        Objects.equals(this.documentDate, customerInvoiceDto.documentDate) &&
        Objects.equals(this.status, customerInvoiceDto.status) &&
        Objects.equals(this.currencyId, customerInvoiceDto.currencyId) &&
        Objects.equals(this.amount, customerInvoiceDto.amount) &&
        Objects.equals(this.amountInCurrency, customerInvoiceDto.amountInCurrency) &&
        Objects.equals(this.balance, customerInvoiceDto.balance) &&
        Objects.equals(this.balanceInCurrency, customerInvoiceDto.balanceInCurrency) &&
        Objects.equals(this.cashDiscount, customerInvoiceDto.cashDiscount) &&
        Objects.equals(this.cashDiscountInCurrency, customerInvoiceDto.cashDiscountInCurrency) &&
        Objects.equals(this.paymentMethod, customerInvoiceDto.paymentMethod) &&
        Objects.equals(this.customerRefNumber, customerInvoiceDto.customerRefNumber) &&
        Objects.equals(this.invoiceText, customerInvoiceDto.invoiceText) &&
        Objects.equals(this.lastModifiedDateTime, customerInvoiceDto.lastModifiedDateTime) &&
        Objects.equals(this.createdDateTime, customerInvoiceDto.createdDateTime) &&
        Objects.equals(this.note, customerInvoiceDto.note) &&
        Objects.equals(this.vatTotal, customerInvoiceDto.vatTotal) &&
        Objects.equals(this.vatTotalInCurrency, customerInvoiceDto.vatTotalInCurrency) &&
        Objects.equals(this.location, customerInvoiceDto.location) &&
        Objects.equals(this.branchNumber, customerInvoiceDto.branchNumber) &&
        Objects.equals(this.cashAccount, customerInvoiceDto.cashAccount) &&
        Objects.equals(this.project, customerInvoiceDto.project) &&
        Objects.equals(this.account, customerInvoiceDto.account) &&
        Objects.equals(this.subaccount, customerInvoiceDto.subaccount) &&
        Objects.equals(this.extras, customerInvoiceDto.extras) &&
        Objects.equals(this.errorInfo, customerInvoiceDto.errorInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creditTerms, documentDueDate, cashDiscountDate, externalReference, isRotRutDeductible, exchangeRate, dunningLetterDate, dunningLetterLevel, contact, attachments, taxDetails, invoiceLines, hold, detailTotal, detailTotalInCurrency, vatTaxableTotal, vatTaxableTotalInCurrency, vatExemptTotal, vatExemptTotalInCurrency, salesPersonID, salesPersonDescr, paymentReference, customer, documentType, referenceNumber, postPeriod, financialPeriod, closedFinancialPeriod, documentDate, status, currencyId, amount, amountInCurrency, balance, balanceInCurrency, cashDiscount, cashDiscountInCurrency, paymentMethod, customerRefNumber, invoiceText, lastModifiedDateTime, createdDateTime, note, vatTotal, vatTotalInCurrency, location, branchNumber, cashAccount, project, account, subaccount, extras, errorInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerInvoiceDto {\n");
    
    sb.append("    creditTerms: ").append(toIndentedString(creditTerms)).append("\n");
    sb.append("    documentDueDate: ").append(toIndentedString(documentDueDate)).append("\n");
    sb.append("    cashDiscountDate: ").append(toIndentedString(cashDiscountDate)).append("\n");
    sb.append("    externalReference: ").append(toIndentedString(externalReference)).append("\n");
    sb.append("    isRotRutDeductible: ").append(toIndentedString(isRotRutDeductible)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    dunningLetterDate: ").append(toIndentedString(dunningLetterDate)).append("\n");
    sb.append("    dunningLetterLevel: ").append(toIndentedString(dunningLetterLevel)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    taxDetails: ").append(toIndentedString(taxDetails)).append("\n");
    sb.append("    invoiceLines: ").append(toIndentedString(invoiceLines)).append("\n");
    sb.append("    hold: ").append(toIndentedString(hold)).append("\n");
    sb.append("    detailTotal: ").append(toIndentedString(detailTotal)).append("\n");
    sb.append("    detailTotalInCurrency: ").append(toIndentedString(detailTotalInCurrency)).append("\n");
    sb.append("    vatTaxableTotal: ").append(toIndentedString(vatTaxableTotal)).append("\n");
    sb.append("    vatTaxableTotalInCurrency: ").append(toIndentedString(vatTaxableTotalInCurrency)).append("\n");
    sb.append("    vatExemptTotal: ").append(toIndentedString(vatExemptTotal)).append("\n");
    sb.append("    vatExemptTotalInCurrency: ").append(toIndentedString(vatExemptTotalInCurrency)).append("\n");
    sb.append("    salesPersonID: ").append(toIndentedString(salesPersonID)).append("\n");
    sb.append("    salesPersonDescr: ").append(toIndentedString(salesPersonDescr)).append("\n");
    sb.append("    paymentReference: ").append(toIndentedString(paymentReference)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    referenceNumber: ").append(toIndentedString(referenceNumber)).append("\n");
    sb.append("    postPeriod: ").append(toIndentedString(postPeriod)).append("\n");
    sb.append("    financialPeriod: ").append(toIndentedString(financialPeriod)).append("\n");
    sb.append("    closedFinancialPeriod: ").append(toIndentedString(closedFinancialPeriod)).append("\n");
    sb.append("    documentDate: ").append(toIndentedString(documentDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountInCurrency: ").append(toIndentedString(amountInCurrency)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    balanceInCurrency: ").append(toIndentedString(balanceInCurrency)).append("\n");
    sb.append("    cashDiscount: ").append(toIndentedString(cashDiscount)).append("\n");
    sb.append("    cashDiscountInCurrency: ").append(toIndentedString(cashDiscountInCurrency)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    customerRefNumber: ").append(toIndentedString(customerRefNumber)).append("\n");
    sb.append("    invoiceText: ").append(toIndentedString(invoiceText)).append("\n");
    sb.append("    lastModifiedDateTime: ").append(toIndentedString(lastModifiedDateTime)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    vatTotal: ").append(toIndentedString(vatTotal)).append("\n");
    sb.append("    vatTotalInCurrency: ").append(toIndentedString(vatTotalInCurrency)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    branchNumber: ").append(toIndentedString(branchNumber)).append("\n");
    sb.append("    cashAccount: ").append(toIndentedString(cashAccount)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    subaccount: ").append(toIndentedString(subaccount)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("    errorInfo: ").append(toIndentedString(errorInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

